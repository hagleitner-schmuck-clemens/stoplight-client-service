openapi: 3.1.0
info:
  title: Standard API
  version: '1.0'
  summary: The Client Service Standard API is a client agnostic API to the client servvice.
  description: The Client Service Standard API is a client agnostic API to the client servvice.
servers:
  - url: 'http://localhost:3000'
tags:
  - name: Branding
  - name: Customers
  - name: Users
  - name: Business data synchronization
  - name: System
  - name: SelfRegistration#
  - name: RoleAssignment
paths:
  /customers:
    get:
      summary: ''
      tags:
        - Customers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/customer'
      operationId: get-customers
      description: Gets a collection of customers
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - schema:
            type: boolean
            default: false
          in: query
          name: includeDeleted
          description: 'Filters customers based on user status. If true only customers with status ''deleted'' will pass the filter, if false only customers with a status not equal to ''deleted'' will pass the filter.'
        - schema:
            type: boolean
            default: true
          in: query
          name: includeDeactivated
          description: 'Filters customers based on user status. If true only customers with status ''deactivated'' will pass the filter, if false only customers with a status not equal to ''deleted'' status will pass the filter.'
        - schema:
            type: boolean
          in: query
          name: includeActive
          description: 'Filters customers based on user status. If true only customers with status ''active'' will pass the filter, if false only customers with a status not equal to ''active'' will pass the filter.'
        - schema:
            type: string
          in: query
          name: customerId
          description: Filters for customers based on the customerId. Note that the customer Id is only unique within all customers of the same reseller.
        - schema:
            type: string
            format: uuid
          in: query
          name: resellerId
          description: Filters for sub customer of the given reseller.
      x-internal: true
    post:
      summary: ''
      operationId: post-customer
      responses:
        '200':
          description: OK
      description: Create a new customer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customer'
      tags:
        - Customers
  '/customers/{id}':
    get:
      summary: ''
      tags:
        - Customers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/customer'
        '':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customer'
      operationId: get-customer
      description: 'Gets a single customer, defined by its customer id.'
      parameters: []
      x-internal: true
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: Id of the customer
    put:
      summary: ''
      operationId: put-customer
      responses:
        '200':
          description: OK
      description: Update a customer.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customer'
      tags:
        - Customers
  '/customers/{id}/branding':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Id of the customer
    get:
      summary: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customerBranding'
      operationId: get-customer-branding
      description: Gets the assigned customer branding for this specific customer
      parameters: []
      x-internal: true
      tags:
        - Customers
    put:
      summary: ''
      operationId: put-customer-branding
      responses:
        '200':
          description: OK
      description: Creates or updates the customer branding
      tags:
        - Customers
  '/customers/{id}/effective-branding':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Id of the customer
    get:
      summary: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/branding'
      operationId: get-customer-effective-branding
      description: Gets the effecive branding for this customer.
      parameters: []
      x-internal: true
      tags:
        - Customers
  '/customers/{id}/efective-roles':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Id of the customer
    get:
      summary: ''
      tags:
        - Customers
      responses: {}
      operationId: customer-assigned-roles#get
      description: Gets effective roles applied to this customer.
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - schema:
            type: string
            format: uuid
          in: query
          name: userId
          description: Filters the collection for the given user id
      x-internal: true
  '/customers/{id}/reseller':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Id of the customer
    get:
      summary: ''
      tags:
        - Customers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/customer'
      operationId: get-customer-reseller
      x-internal: false
      description: Gets the reseller of this customer
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
  '/customers/{id}/role-assignments':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Id of the customer
    get:
      summary: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/roleAssignment-resolved'
      operationId: customer-role-assignments#get
      description: Gets roles-assignments of this customer. Role-assignments are ordered by the assignment date ascending (oldest first).
      parameters:
        - schema:
            type: integer
            minimum: 1
            default: 100
            maximum: 1000
          in: query
          name: limit
          description: 'Pagination, maximum page size'
        - schema:
            type: integer
            minimum: 0
          in: query
          name: offset
          description: 'Pagination, page offset'
        - schema:
            type: string
          in: query
          name: userId
          description: If given filters the list for roles assigned to that specific user
      x-internal: false
      tags:
        - RoleAssignment
    post:
      summary: ''
      operationId: customers-assigned-roles#post
      responses:
        '200':
          description: OK
      description: Creates a new role-assignement for this customer.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/roleAssignment'
      tags:
        - RoleAssignment
  '/customers/{id}/role-assignments/{role-assignment-id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Id of the customer
      - schema:
          type: string
        name: role-assignment-id
        in: path
        required: true
        description: Id of the role assignment
    get:
      summary: ''
      tags:
        - Customers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/roleAssignment-resolved'
      operationId: customer-role-assignment#get
      description: 'Gets role-assignemnts '
      parameters:
        - schema:
            type: string
          in: query
          name: Id
          description: Id of the role assignment
      x-internal: false
    delete:
      summary: ''
      operationId: customer-role-assignment#delete
      responses:
        '200':
          description: OK
      description: Deletes a role assignment.
      parameters:
        - schema:
            type: string
          in: query
          name: Id
          description: Id of the role assignment.
  '/customers/{id}/self-registration-credentials/current':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Id of the customer
    get:
      summary: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/selfRegistrationCredential'
        '400':
          description: Bad Request
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
              examples:
                Self registration without customer number:
                  value:
                    type: self-registration-credentials-without-customernumber
                    title: Self registration only possible for customers with a customer number
                    detail: Self-registration credentials can only be issued for customers with an assigned customer number.
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      operationId: self-registration-credential-current#get
      x-internal: false
      description: Gets the self-registration credentials for the current date. If that credential was not created before the server will create the credantial when this endpoint is called.
      parameters: []
      tags:
        - SelfRegistration
  '/customers/{id}/self-registration-credentials':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Id of the customer
    get:
      summary: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/selfRegistrationCredential'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
      operationId: self-registration-credentials#get
      x-internal: false
      description: Gets a list of currently active self-registration credentials. List is ordered ascending by ValidTill date.
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      tags:
        - SelfRegistration
  '/customers/{id}/self-registration-credentials/{selfRegistrationCredentialId}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Id of the customer
      - schema:
          type: string
        name: selfRegistrationCredentialId
        in: path
        required: true
    get:
      summary: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/selfRegistrationCredential'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      operationId: self-registration-credential#get
      x-internal: false
      description: Gets a list of currently active self-registration informations
      parameters: []
      tags:
        - SelfRegistration
    delete:
      summary: ''
      operationId: self-registration-credential#delete
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      description: 'Delete a self registration information. '
  '/customers/{id}/reseller-relation':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Id of the customer
    get:
      summary: ''
      tags:
        - Customers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resellerRelation'
        '':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customer'
      operationId: get-customer-reseller-relation
      x-internal: false
      description: Gets the reseller relation of this customer
      parameters: []
    post:
      summary: ''
      operationId: post-customers-id-reseller-relation
      responses:
        '200':
          description: OK
      description: Creates a reseller relation for this customer (replacing any existing relation)
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/resellerRelation'
  '/synchronization/customers/{id}/role-assignments':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Id of the customer
    get:
      summary: ''
      tags:
        - Customers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/roleAssignment-resolved'
      operationId: synchronization-customer-role-assignments#get
      description: Gets roles-assignments of this customer together with synchronization data. Role-assignments are ordered by the assignment date ascending (oldest first).
      parameters:
        - schema:
            type: integer
            minimum: 1
            default: 100
            maximum: 1000
          in: query
          name: limit
          description: 'Pagination, maximum page size'
        - schema:
            type: integer
            minimum: 0
          in: query
          name: offset
          description: 'Pagination, page offset'
        - schema:
            type: string
          in: query
          name: userId
          description: If given filters the list for roles assigned to that specific user
      x-internal: false
    post:
      summary: ''
      operationId: customers-assigned-roles#post
      responses:
        '200':
          description: OK
      description: Creates a new role-assignement for this customer.
      tags:
        - Customers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/roleAssignment'
  '/customers/{id}/reseller-hierarchy':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Id of the customer
    get:
      summary: ''
      tags:
        - Customers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/customer'
        '':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/customer'
      operationId: get-customer-reseller-hierarchy
      x-internal: false
      description: Gets all the resellers to this customer as sorted list. First element is the root reseller.
      parameters: []
  '/customers/{id}/sub-customers':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Id of the customer
    get:
      summary: ''
      tags:
        - Customers
        - customer-relations
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/customerLight'
      operationId: get-customer-sub-customers
      x-internal: false
      description: Gets all the sub-customers of a customer (direct descendants in the reseller-relationship-tree)
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
  '/customers/{id}/subsidiaries':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Id of the customer
    get:
      summary: ''
      tags:
        - Customers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/customerLight'
      operationId: get-customer-subsidiaries
      x-internal: false
      description: Gets all the subsidiaries of a customer (direct descendants in the company-hierarchy-relationship-tree)
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
  '/customers/{id}/invoice-sources':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Id of the customer
    get:
      summary: ''
      tags:
        - Customers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/customerLight'
      operationId: get-customer-subsidiaries
      x-internal: false
      description: Gets all the invoice sources of a customer (direct descendants in the invoicing-relationship-tree)
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
  '/customers/{id}/beneficiaries':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Id of the customer
    get:
      summary: ''
      tags:
        - Customers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/customerLight'
      operationId: get-customer-subsidiaries
      x-internal: false
      description: Gets all the beneficiares of a customer (direct descendants in the condition-relationship-tree)
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
  /synchronization/customers:
    parameters: []
    get:
      summary: ''
      operationId: synchronization-customers#get
      responses:
        '200':
          description: OK
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total count of resources in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/customer-synchronization'
              examples:
                example-1:
                  value:
                    - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                      firstName: John
                      lastName: Doe
                      emailAddress: john@doe.com
                      preferredCulture: de-AT
                      mobilePhoneNumber: +43 664 9161413
                      gender: diverse
                      createdAt: '2021-08-23T16:15:18.123+01:00'
                      latestUpdateAt: '2021-08-23T16:15:18.123+01:00'
                      synchronizationId: 0e45b7ef-0a0a-4d71-b486-8536460bb9b7
                      synchronizationInformation: string
                      status: string
                      '': string
        '401':
          description: Unauthorized
      description: Gets customers with detail information useful for synchronization with other systems.
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - schema:
            type: boolean
            default: false
          in: query
          name: includeDeleted
          description: 'Filters customers based on user status. If true only customers with status ''deleted'' will pass the filter, if false only customers with a status not equal to ''deleted'' will pass the filter.'
        - schema:
            type: boolean
            default: true
          in: query
          name: includeDeactivated
          description: 'Filters customers based on user status. If true only customers with status ''deactivated'' will pass the filter, if false only customers with a status not equal to ''deleted'' status will pass the filter.'
        - schema:
            type: boolean
          in: query
          name: includeActive
          description: 'Filters customers based on user status. If true only customers with status ''active'' will pass the filter, if false only customers with a status not equal to ''active'' will pass the filter.'
        - schema:
            type: string
            format: uuid
            example: 98aea202-354b-4912-81f7-364e609fe650
          in: query
          name: synchronizationId
          description: Filters for a customer with the given synchronization Id. Only a customer with an exact match will pass the filter.
        - schema:
            type: string
            example: '2021-11-12T21:15:13.1234+01:00'
          in: query
          name: latestUpdatedAfter
          description: Filters for customers  that were last updated in the system after (>) the given date.
        - schema:
            type: string
            example: '2021-11-12T21:15:13.1234+01:00'
          in: query
          name: createdBefore
          description: 'Filters for customers  that were created in the system before (<) the given date. '
        - schema:
            type: boolean
          in: query
          name: synchronizationIdAvailable
          description: 'Filters for customers based on the availability of a synchronizationId. If set to true only users with a non-empty synchronizationId will pass the filter, if set to false only users with an empty synchronizationId will pass the filter.  '
        - schema:
            type: string
          in: query
          name: customerNumber
          description: Filters for customers based on the customer number. Note that the customer Id is only unique within all customers of the same reseller.
        - schema:
            type: string
            format: uuid
          in: query
          name: resellerId
          description: Filters for sub customer of the given reseller.
        - schema:
            type: string
          in: query
          name: namePattern
          description: Filters for customers whose name matches the given pattern.
      tags:
        - Business data synchronization
        - Users
    post:
      summary: ''
      operationId: synchronization-customer#post
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
      description: Creates a customer with detail information useful for synchronization with other systems.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customer-synchronization'
  '/synchronization/customers/{id}/role-assignments/{role-assignment-id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Id of the customer
      - schema:
          type: string
        name: role-assignment-id
        in: path
        required: true
        description: Id of the role assignment
    get:
      summary: ''
      tags:
        - Customers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/roleAssignment-resolved'
      operationId: synchronization-customer-role-assignment#get
      description: 'Gets role-assignemnts '
      parameters:
        - schema:
            type: string
          in: query
          name: Id
          description: Id of the role assignment
      x-internal: false
  '/synchronization/customers/{id}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: Id of the customer
    get:
      summary: ''
      operationId: synchronization-customer#get
      responses:
        '200':
          description: OK
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total count of resources in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/customer-synchronization'
              examples:
                example-1:
                  value:
                    - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                      firstName: John
                      lastName: Doe
                      emailAddress: john@doe.com
                      preferredCulture: de-AT
                      mobilePhoneNumber: +43 664 9161413
                      gender: diverse
                      createdAt: '2021-08-23T16:15:18.123+01:00'
                      latestUpdateAt: '2021-08-23T16:15:18.123+01:00'
                      synchronizationId: 0e45b7ef-0a0a-4d71-b486-8536460bb9b7
                      synchronizationInformation: string
                      status: string
                      '': string
        '401':
          description: Unauthorized
      description: Gets customer with detail information useful for synchronization with other systems.
      parameters: []
      tags:
        - Business data synchronization
        - Users
    put:
      summary: ''
      operationId: synchronization-customer#put
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
      description: Updates a customer with detailled information for synchronization processes.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customer-synchronization'
      tags:
        - Business data synchronization
  '/synchronization/customers/{id}/reseller-relation':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: Id of the customer
    get:
      summary: ''
      operationId: synchronization-customer-reseller-relation#get
      responses:
        '200':
          description: OK
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total count of resources in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/resellerRelation-synchroniization'
              examples:
                example-1:
                  value:
                    - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                      firstName: John
                      lastName: Doe
                      emailAddress: john@doe.com
                      preferredCulture: de-AT
                      mobilePhoneNumber: +43 664 9161413
                      gender: diverse
                      createdAt: '2021-08-23T16:15:18.123+01:00'
                      latestUpdateAt: '2021-08-23T16:15:18.123+01:00'
                      synchronizationId: 0e45b7ef-0a0a-4d71-b486-8536460bb9b7
                      synchronizationInformation: string
                      status: string
                      '': string
        '401':
          description: Unauthorized
      description: Gets the reseller relation of this customer with detail information useful for synchronization with other systems.
      parameters: []
      tags:
        - Business data synchronization
        - Users
    put:
      summary: ''
      operationId: synchronization-customer-reseller-relation#put
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
      description: Updates a customer with detailled information for synchronization processes.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/synchronization-user'
      tags:
        - Business data synchronization
  '/synchronization/customers/{id}/reseller-relations/':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: Id of the customer
    get:
      summary: ''
      operationId: synchronization-customer-reseller-relations#get
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/resellerRelation'
      description: Gets all reseller relations of this customer i.e. all relations between customers where this customer is the reseller.
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      tags:
        - Business data synchronization
        - Users
    post:
      summary: ''
      operationId: synchronization-customers-reseller-relations#put
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resellerRelation-synchroniization'
      description: ''
  /synchronization/users:
    parameters: []
    get:
      summary: ''
      operationId: synchronization-users#get
      responses:
        '200':
          description: OK
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total count of resources in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/user-synchronization'
              examples:
                example-1:
                  value:
                    - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                      firstName: John
                      lastName: Doe
                      emailAddress: john@doe.com
                      preferredCulture: de-AT
                      mobilePhoneNumber: +43 664 9161413
                      gender: diverse
                      createdAt: '2021-08-23T16:15:18.123+01:00'
                      latestUpdateAt: '2021-08-23T16:15:18.123+01:00'
                      synchronizationId: 0e45b7ef-0a0a-4d71-b486-8536460bb9b7
                      synchronizationInformation: string
                      status: string
                      '': string
        '401':
          description: Unauthorized
      description: Gets registered users with detail information useful for synchronization with other systems.
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - schema:
            type: boolean
            default: false
          in: query
          name: includeDeleted
          description: 'Filters users based on user status. If true only users with status ''deleted'' will pass the filter, if false only users with a status not equal to ''deleted'' will pass the filter.'
        - schema:
            type: boolean
            default: true
          in: query
          name: includeDeactivated
          description: 'Filters users based on user status. If true only users with status ''deactivated'' will pass the filter, if false only users with a status not equal to ''deleted'' status will pass the filter.'
        - schema:
            type: boolean
          in: query
          name: includeActive
          description: 'Filters users based on user status. If true only uses with status ''active'' will pass the filter, if false only users with a status not equal to ''active'' will pass the filter.'
        - schema:
            type: string
            format: email
            example: jon@doe.com
          in: query
          name: emailAddress
          description: Filter for user with the given e-mail address. The match is case insensitive.
        - schema:
            type: string
            format: uuid
            example: 98aea202-354b-4912-81f7-364e609fe650
          in: query
          name: synchronizationId
          description: Filters for a user with the given synchronization Id. Only a user with an exact match will pass the filter.
        - schema:
            type: string
            example: '2021-11-12T21:15:13.1234+01:00'
          in: query
          name: lastUpdatedAfter
          description: Filters for users that were last updated in the system after (>) the given date.
        - schema:
            type: string
            example: '2021-11-12T21:15:13.1234+01:00'
          in: query
          name: createdBefore
          description: 'Filters for users that were created in the system before (<) the given date. '
        - schema:
            type: boolean
          in: query
          name: synchronizationIdAvailable
          description: 'Filters for users based on the availability of a synchronizationId. If set to true only users with a non-empty synchronizationId will pass the filter, if set to false only users with an empty synchronizationId will pass the filter.  '
      tags:
        - Business data synchronization
        - Users
    post:
      summary: ''
      operationId: synchronization-user#post
      responses:
        '200':
          description: OK
      description: Creates a new user together with synchronization data.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user-synchronization'
  '/synchronization/users/{id}':
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: UUID of the collection element
    get:
      summary: ''
      operationId: synchronization-user#get
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user-synchronization'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      description: Gets a specific user with detail information useful for synchronization with other systems.
      tags:
        - Business data synchronization
    put:
      summary: ''
      operationId: synchronization-user#put
      responses:
        '200':
          description: OK
      description: Updates a suer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user-synchronization'
      tags:
        - Business data synchronization
    patch:
      summary: ''
      operationId: synchronization-user#patch
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user-synchronization'
      tags:
        - Business data synchronization
  /system/instance-branding:
    get:
      summary: Get instance branding
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/branding'
        '':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/branding'
      operationId: get-instance-branding
      description: Gets the instance branding definition.
      tags:
        - System
    put:
      summary: Put instance branding
      operationId: put-system-branding
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/branding'
      description: Sets the branding for the whole instance
      tags:
        - System
    parameters: []
  /system/role-assignments:
    parameters: []
    get:
      summary: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/roleAssignment-resolved'
      operationId: systemr-role-assignments#get
      description: Gets role-assignments for the system. Role-assignments are ordered by the assignment date ascending (oldest first).
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - schema:
            type: string
          in: query
          name: userId
          description: If given filters the list for roles assigned to that specific user.
      x-internal: false
      tags:
        - RoleAssignment
    post:
      summary: ''
      operationId: system-role-assignments#post
      responses:
        '200':
          description: OK
      description: Creates a new role assignement for this customer.
      tags:
        - Customers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/roleAssignment'
  '/system/role-assignments/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Id of the customer
    get:
      summary: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/roleAssignment-resolved'
      operationId: system-role-assignment#get
      description: Gets a role assigned to the system.
      parameters:
        - schema:
            type: string
          in: query
          name: Id
          description: Id of the role assignment
      x-internal: false
      tags:
        - RoleAssignment
    delete:
      summary: ''
      operationId: system-role-assignment#delete
      responses:
        '200':
          description: OK
      description: Deletes a system role assignment.
      parameters:
        - schema:
            type: string
          in: query
          name: Id
          description: Id of the role assignment.
  /system/roles:
    get:
      summary: ''
      responses: {}
      operationId: get-system-roles
      description: Gets a list of roles defined for the system.
      parameters:
        - schema:
            type: string
          in: query
          name: limit
        - schema:
            type: string
          in: query
          name: offset
        - schema:
            type: string
          in: query
          name: user
      x-internal: true
      tags:
        - System
    parameters: []
  /users:
    parameters: []
    get:
      summary: ''
      operationId: get-users
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
      description: Gets registered users.
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - schema:
            type: integer
          in: header
          name: X-Total-Count
          description: Total number of elements in the collection.
        - schema:
            type: boolean
          in: query
          name: includeDeleted
          description: Include or exclude uses with status 'deleted'.
        - schema:
            type: boolean
          in: query
          name: includeDeactivated
          description: Include or exclude uses with status 'deactivated'.
        - schema:
            type: boolean
          in: query
          name: includeActive
          description: Include or exclude uses with status 'active'.
      tags:
        - Users
    post:
      summary: ''
      operationId: post-users
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
      tags:
        - Users
  '/users/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Get user by Id
      operationId: get-user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
      description: Gets a specific user.
      tags:
        - Users
    put:
      summary: Put user
      operationId: put-user
      responses:
        '200':
          description: OK
      description: Updates a specific user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
      tags:
        - Users
  '/users/{id}/mask':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    put:
      summary: ''
      operationId: put-users-mask
      responses:
        '200':
          description: OK
      description: 'Will remove all personal information of a user, thus removing the relation to a natural person.'
      tags:
        - Users
  '/users/{id}/status':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: ''
      operationId: get-users-status
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userStatus'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      description: Gets a the status of a specific user
      tags:
        - Business data synchronization
    put:
      summary: ''
      operationId: put-user-status
      description: Updates a user's status
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userStatus'
        description: ''
      tags:
        - Business data synchronization
      responses:
        '200':
          description: OK
        '406':
          description: 'Not Acceptable. The requested user status change is not acceptable. '
  '/users/{id}/assigned-customer-roles':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: ID of  the user in the HsM system.
    get:
      summary: ''
      responses: {}
      operationId: get-user-customerroles
      description: 'Gets a list of roles the user has on a customer, or on all customers. Result will be ordered by customerId then role code.'
      parameters:
        - schema:
            type: string
            format: uuid
          in: query
          name: customerId
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      tags:
        - Users
    post:
      summary: Add a assigned customer role to a user
      operationId: post-users-customerrole
      responses:
        '200':
          description: OK
      tags:
        - Users
  '/users/{id}/assigned-system-roles':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: ID of  the user in the HsM system.
    get:
      summary: ''
      tags:
        - Users
      responses: {}
      operationId: get-user-systemroles
      description: Gets a list of systemroles assigned to that user.
      parameters:
        - schema:
            type: integer
          in: query
          name: limit
          description: 'Pagination, page size limit'
        - schema:
            type: integer
          in: query
          name: offset
          description: 'Pagination, page offset'
    post:
      summary: ''
      operationId: post-user-systemrole
      responses:
        '200':
          description: OK
      description: Grant a system role to that user
      tags:
        - Users
    delete:
      summary: ''
      operationId: delete-user-systemrole
      responses:
        '200':
          description: OK
      tags:
        - Users
components:
  schemas:
    branding:
      description: This model describes the branding of the instance or the effective branding for a customer
      type: object
      properties:
        productName:
          type: string
          minLength: 1
        displayModeDark:
          type: object
          properties:
            companyLogo:
              type: string
              minLength: 1
            navigationBarCompanyLogo:
              type: string
              minLength: 1
            mainColor300:
              type: object
              properties:
                hexCode:
                  type: string
                  minLength: 1
              required:
                - hexCode
            mainColor500:
              type: object
              properties:
                hexCode:
                  type: string
                  minLength: 1
              required:
                - hexCode
            mainColor700:
              type: object
              properties:
                hexCode:
                  type: string
                  minLength: 1
              required:
                - hexCode
            navigationBarColor:
              type: object
              properties:
                hexCode:
                  type: string
                  minLength: 1
              required:
                - hexCode
            navigationBarContrastColor:
              type: object
              properties:
                hexCode:
                  type: string
                  minLength: 1
              required:
                - hexCode
            selectionColor:
              type: object
              properties:
                hexCode:
                  type: string
                  minLength: 1
              required:
                - hexCode
          required:
            - companyLogo
            - navigationBarCompanyLogo
            - mainColor300
            - mainColor500
            - mainColor700
            - navigationBarColor
            - navigationBarContrastColor
            - selectionColor
        displayModeLight:
          type: object
          properties:
            companyLogo:
              type: string
              minLength: 1
            navigationBarCompanyLogo:
              type: string
              minLength: 1
            mainColor300:
              type: object
              properties:
                hexCode:
                  type: string
                  minLength: 1
              required:
                - hexCode
            mainColor500:
              type: object
              properties:
                hexCode:
                  type: string
                  minLength: 1
              required:
                - hexCode
            mainColor700:
              type: object
              properties:
                hexCode:
                  type: string
                  minLength: 1
              required:
                - hexCode
            navigationBarColor:
              type: object
              properties:
                hexCode:
                  type: string
                  minLength: 1
              required:
                - hexCode
            navigationBarContrastColor:
              type: object
              properties:
                hexCode:
                  type: string
                  minLength: 1
              required:
                - hexCode
            selectionColor:
              type: object
              properties:
                hexCode:
                  type: string
                  minLength: 1
              required:
                - hexCode
          required:
            - companyLogo
            - navigationBarCompanyLogo
            - mainColor300
            - mainColor500
            - mainColor700
            - navigationBarColor
            - navigationBarContrastColor
            - selectionColor
        instanceOperator:
          type: string
          minLength: 1
        clientSpecificOptions:
          type: object
          properties:
            webPortal:
              type: object
              properties:
                favIcon:
                  type: string
                  minLength: 1
              required:
                - favIcon
          required:
            - webPortal
      required:
        - productName
        - displayModeDark
        - displayModeLight
        - instanceOperator
        - clientSpecificOptions
      x-examples:
        example-1:
          productName: senseManagement
          displayModeDark:
            companyLogo: 'https://hagleitner.com/logos/hagleitnerLogo.dark.svg'
            navigationBarCompanyLogo: 'https://hagleitner.com/logos/hagleitnerLogo.dark.navigationbar.svg'
            mainColor300:
              hexCode: '#123456'
            mainColor500:
              hexCode: '#123456'
            mainColor700:
              hexCode: '#123456'
            navigationBarColor:
              hexCode: '#123456'
            navigationBarContrastColor:
              hexCode: '#123456'
            selectionColor:
              hexCode: '#123456'
          displayModeLight:
            companyLogo: 'https://hagleitner.com/logos/hagleitnerLogo.light.svg'
            navigationBarCompanyLogo: 'https://hagleitner.com/logos/hagleitnerLogo.light.navigationbar.svg'
            mainColor300:
              hexCode: '#123456'
            mainColor500:
              hexCode: '#123456'
            mainColor700:
              hexCode: '#123456'
            navigationBarColor:
              hexCode: '#123456'
            navigationBarContrastColor:
              hexCode: '#123456'
            selectionColor:
              hexCode: '#123456'
          instanceOperator: Hagleitner
          clientSpecificOptions:
            webPortal:
              favIcon: 'https://hagleitner.com/logos/hsm-favicon.svg'
    customer:
      type: object
      title: customer
      description: Describes a customer.
      properties:
        id:
          type: string
          format: uuid
          description: Id of the user within the HsM system.
          readOnly: true
        code:
          type: string
          example: HHAT
          description: 'A code that -if given - uniquely identifies the customer within the whole system. '
        name:
          type: string
          example: John
          maxLength: 50
        address:
          type: string
          example: Doe
          maxLength: 50
        city:
          type: string
        postalCode:
          type: string
        countryCode:
          type: string
          description: ISO 3166-1 alpha-2 code
        emailAddress:
          type: string
          description: The users e-mail address. This address must be unique within all non deleted users in the HsM system.
          format: email
          example: john@doe.com
          maxLength: 256
        preferredCulture:
          type: string
          description: |-
            The culture the user wants to use in interaction with the system. Given as IETF BCP 47 language tag. If not given the system will use a default invariatn culture. 

            This cutlure is a default for this user, client systems might however choose to use another culture for interaction with the HsM system.
          example: de-AT
          maxLength: 35
        status:
          type: string
          enum:
            - active
            - inactive
            - deleted
          description: The status of the user in terms of his possibilty to interact with the system.
          default: active
          readOnly: true
        isReseller:
          type: boolean
          description: Defines if a customer is a reseller. Customer marked as resellers can use HsM's reseller features.
        lastUpdatedAt:
          type: string
          description: 'Describes when the user was last modified within HsM. '
          format: date-time
          example: '2021-08-23T16:15:18.123+01:00'
          readOnly: true
        resellerId:
          type: string
          format: uuid
          description: Specifies the mandatory reseller for this customer.
          writeOnly: true
      required:
        - id
        - emailAddress
        - isReseller
        - resellerId
    customer-synchronization:
      type: object
      title: customer-synchronization
      description: Describes a customer of the HsM system together with information relevant for synchronization with other business systems.
      properties:
        id:
          type: string
          format: uuid
          description: Id of the user within the HsM system.
          readOnly: true
        code:
          type: string
          maxLength: 20
        name:
          type: string
          example: John
          maxLength: 50
        address:
          type: string
          example: Doe
          maxLength: 50
        city:
          type: string
        postalCode:
          type: string
        countryCode:
          type: string
          description: ISO 3166-1 alpha-2 code
          minLength: 2
          maxLength: 2
        emailAddress:
          type: string
          description: The users e-mail address. This address must be unique within all non deleted users in the HsM system.
          format: email
          example: john@doe.com
          maxLength: 256
        preferredCulture:
          type: string
          description: |-
            The culture the user wants to use in interaction with the system. Given as IETF BCP 47 language tag. If not given the system will use a default invariatn culture. 

            This cutlure is a default for this user, client systems might however choose to use another culture for interaction with the HsM system.
          example: de-AT
          maxLength: 35
        status:
          type: string
          enum:
            - active
            - inactive
            - deleted
          description: The status of the user in terms of his possibilty to interact with the system.
          default: active
          readOnly: true
        isReseller:
          type: boolean
          description: Defines if a customer is a reseller. Customer marked as resellers can use HsM's reseller features.
          default: false
        lastUpdatedAt:
          type: string
          description: 'Describes when the user was last modified within HsM. '
          format: date-time
          example: '2021-08-23T16:15:18.123+01:00'
          readOnly: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        synchronizationId:
          type: string
          format: uuid
        synchronizationInformation:
          type: string
        resellerId:
          type: string
          description: Specifies the mandatory reseller for this customer.
          format: uuid
      required:
        - id
        - emailAddress
        - resellerId
    customerBranding:
      description: This model describes the branding for a customer
      type: object
      x-examples:
        example-1:
          productName: senseManagement
          displayModeDark:
            companyLogo: 'https://hagleitner.com/logos/hagleitnerLogo.dark.svg'
            navigationBarCompanyLogo: 'https://hagleitner.com/logos/hagleitnerLogo.dark.navigationbar.svg'
            mainColor300:
              hexCode: '#123456'
            mainColor500:
              hexCode: '#123456'
            mainColor700:
              hexCode: '#123456'
            navigationBarColor:
              hexCode: '#123456'
            navigationBarContrastColor:
              hexCode: '#123456'
            selectionColor:
              hexCode: '#123456'
          displayModeLight:
            companyLogo: 'https://hagleitner.com/logos/hagleitnerLogo.light.svg'
            navigationBarCompanyLogo: 'https://hagleitner.com/logos/hagleitnerLogo.light.navigationbar.svg'
            mainColor300:
              hexCode: '#123456'
            mainColor500:
              hexCode: '#123456'
            mainColor700:
              hexCode: '#123456'
            navigationBarColor:
              hexCode: '#123456'
            navigationBarContrastColor:
              hexCode: '#123456'
            selectionColor:
              hexCode: '#123456'
          instanceOperator: Hagleitner
          clientSpecificOptions:
            webPortal:
              favIcon: 'https://hagleitner.com/logos/hsm-favicon.svg'
      title: customerBranding
      properties:
        displayModeDark:
          type: object
          required:
            - companyLogo
            - navigationBarCompanyLogo
            - mainColor300
            - mainColor500
            - mainColor700
            - navigationBarColor
            - navigationBarContrastColor
            - selectionColor
          properties:
            companyLogo:
              type: string
              minLength: 1
            navigationBarCompanyLogo:
              type: string
              minLength: 1
            mainColor300:
              type: object
              required:
                - hexCode
              properties:
                hexCode:
                  type: string
                  minLength: 1
            mainColor500:
              type: object
              required:
                - hexCode
              properties:
                hexCode:
                  type: string
                  minLength: 1
            mainColor700:
              type: object
              required:
                - hexCode
              properties:
                hexCode:
                  type: string
                  minLength: 1
            navigationBarColor:
              type: object
              required:
                - hexCode
              properties:
                hexCode:
                  type: string
                  minLength: 1
            navigationBarContrastColor:
              type: object
              required:
                - hexCode
              properties:
                hexCode:
                  type: string
                  minLength: 1
            selectionColor:
              type: object
              required:
                - hexCode
              properties:
                hexCode:
                  type: string
                  minLength: 1
        displayModeLight:
          type: object
          required:
            - companyLogo
            - navigationBarCompanyLogo
            - mainColor300
            - mainColor500
            - mainColor700
            - navigationBarColor
            - navigationBarContrastColor
            - selectionColor
          properties:
            companyLogo:
              type: string
              minLength: 1
            navigationBarCompanyLogo:
              type: string
              minLength: 1
            mainColor300:
              type: object
              required:
                - hexCode
              properties:
                hexCode:
                  type: string
                  minLength: 1
            mainColor500:
              type: object
              required:
                - hexCode
              properties:
                hexCode:
                  type: string
                  minLength: 1
            mainColor700:
              type: object
              required:
                - hexCode
              properties:
                hexCode:
                  type: string
                  minLength: 1
            navigationBarColor:
              type: object
              required:
                - hexCode
              properties:
                hexCode:
                  type: string
                  minLength: 1
            navigationBarContrastColor:
              type: object
              required:
                - hexCode
              properties:
                hexCode:
                  type: string
                  minLength: 1
            selectionColor:
              type: object
              required:
                - hexCode
              properties:
                hexCode:
                  type: string
                  minLength: 1
      required:
        - displayModeDark
        - displayModeLight
    customerLight:
      type: object
      title: customer
      description: Describes a customer.
      properties:
        id:
          type: string
          format: uuid
          description: Id of the user within the HsM system.
          readOnly: true
        name:
          type: string
          example: John
          maxLength: 50
        address:
          type: string
          example: Doe
          maxLength: 50
        city:
          type: string
        postalCode:
          type: string
        countryCode:
          type: string
          description: ISO 3166-1 alpha-2 code
      required:
        - id
    resellerRelation:
      type: object
      title: resellerRelation
      properties:
        relationId:
          type: string
          format: uuid
          readOnly: true
        parentCustomerId:
          type: string
        synchronizationInformation:
          type: string
        lastUpdatedAt:
          type: string
          readOnly: true
        createdAt:
          type: string
          readOnly: true
      required:
        - relationId
        - parentCustomerId
    resellerRelation-synchroniization:
      type: object
      title: resellerRelation
      properties:
        relationId:
          type: string
          format: uuid
          readOnly: true
        parentCustomerId:
          type: string
        synchronizationInformation:
          type: string
        lastUpdatedAt:
          type: string
          readOnly: true
        createdAt:
          type: string
          readOnly: true
      required:
        - relationId
        - parentCustomerId
    user-synchronization:
      type: object
      title: synchronizationUser
      description: Describes a user of the HsM system. Users are should generally be natural persons.
      properties:
        id:
          type: string
          format: uuid
          description: Id of the user within the HsM system.
          readOnly: true
        firstName:
          type: string
          example: John
          maxLength: 50
        lastName:
          type: string
          example: Doe
          maxLength: 50
        emailAddress:
          type: string
          description: The users e-mail address. This address must be unique within all non deleted users in the HsM system.
          format: email
          example: john@doe.com
          maxLength: 256
        preferredCulture:
          type: string
          description: |-
            The culture the user wants to use in interaction with the system. Given as IETF BCP 47 language tag. If not given the system will use a default invariatn culture. 

            This cutlure is a default for this user, client systems might however choose to use another culture for interaction with the HsM system.
          example: de-AT
          maxLength: 35
        mobilePhoneNumber:
          type: string
          description: 'Mobile phone number. This number will be used when the system wants to interact with that user via SMS, mobile phone numbers are not exposed to other users.'
          example: +43 664 9161413
        gender:
          type: string
          enum:
            - female
            - male
            - non-binary
          description: ''
        status:
          type: string
          enum:
            - active
            - inactive
            - deleted
          description: The status of the user in terms of his possibilty to interact with the system.
          readOnly: true
        createdAt:
          type: string
          format: date-time
          example: '2021-08-23T16:15:18.123+01:00'
          readOnly: true
        latestUpdatedAt:
          type: string
          description: 'Describes when the user was last modified within HsM. '
          format: date-time
          example: '2021-08-23T16:15:18.123+01:00'
          readOnly: true
        synchronizationId:
          type: string
          format: uuid
          description: Id of the user in an external system.
        synchronizationInformation:
          type: string
          description: A JSON document that can be used by synchronization processes to store synchronization information with this user. The schema of the JSON document is defined by the external synchronization process.
      required:
        - id
        - emailAddress
        - preferredCulture
        - createdAt
        - latestUpdatedAt
    user:
      type: object
      title: user
      description: Describes a user of the HsM system. Users in HsM will be linked to Azure B2C accounts by the unique e-mail address once a user first accesses HsM via B2C authentication.
      properties:
        id:
          type: string
          format: uuid
          description: Id of the user within the HsM system.
          readOnly: true
        firstName:
          type: string
          example: John
          maxLength: 50
        lastName:
          type: string
          example: Doe
          maxLength: 50
        emailAddress:
          type: string
          description: The users e-mail address. This address must be unique within all non deleted users in the HsM system.
          format: email
          example: john@doe.com
          maxLength: 256
        preferredCulture:
          type: string
          description: |-
            The culture the user wants to use in interaction with the system. Given as IETF BCP 47 language tag. If not given the system will use a default invariatn culture. 

            This cutlure is a default for this user, client systems might however choose to use another culture for interaction with the HsM system.
          example: de-AT
          maxLength: 35
        mobilePhoneNumber:
          type: string
          description: 'Mobile phone number. This number will be used when the system wants to interact with that user via SMS, mobile phone numbers are not exposed to other users.'
          example: +43 664 9161413
        gender:
          type: string
          enum:
            - female
            - male
            - non-binary
          description: ''
        lastUpdatedAt:
          type: string
          description: 'Describes when the user was last modified within HsM. '
          format: date-time
          example: '2021-08-23T16:15:18.123+01:00'
          readOnly: true
        status:
          type: string
          enum:
            - active
            - inactive
            - deleted
          description: The status of the user in terms of his possibilty to interact with the system.
          readOnly: true
      required:
        - emailAddress
    selfRegistrationCredential:
      title: selfRegistrationCredential
      type: object
      properties:
        Id:
          type: string
          format: uuid
          description: Id of this self-registration credential
          readOnly: true
        customerNumber:
          type: string
          description: Customer number of this credential
          readOnly: true
        pin:
          type: string
          description: PIN of this credential
          minLength: 9
          maxLength: 9
          readOnly: true
        validTill:
          type: string
          description: Date until this credential is valid.
          format: date-time
          readOnly: true
        shareUri:
          type: string
          format: uri
          description: A URI that can be used to assign oneself to the customer.
      required:
        - Id
        - customerNumber
        - pin
        - validTill
        - shareUri
    response-401-unauthorized:
      title: response-401-unauthorized
      type: object
      properties:
        type:
          type: string
        title:
          type: string
        detail:
          type: string
        missingPermission:
          type: string
      description: A model for returning details for 401 responses
      examples:
        - type: Insufficient-Privileges
          title: The accessing user does not have the provileges to access this resource
          detail: The user accessing the resource does is not granted the privilege to access the resource.
          missingPermission: ShareSelfRegistrationCredentials
    response-403-forbidden:
      title: response-401-unauthorized
      type: object
      properties:
        type:
          type: string
        title:
          type: string
        detail:
          type: string
        missingPermission:
          type: string
      description: A model for returning details for 401 responses
      examples:
        - type: Insufficient-Privileges
          title: The accessing user does not have the provileges to access this resource
          detail: The user accessing the resource does is not granted the privilege to access the resource.
          missingPermission: ShareSelfRegistrationCredentials
    response-400-badRequest:
      title: response-401-unauthorized
      type: object
      description: A model for returning details for 401 responses
      examples:
        - type: Insufficient-Privileges
          title: The accessing user does not have the provileges to access this resource
          detail: The user accessing the resource does is not granted the privilege to access the resource.
          missingPermission: ShareSelfRegistrationCredentials
      properties:
        type:
          type: string
        title:
          type: string
        detail:
          type: string
    roleAssignment:
      title: customerRoleAssignment
      type: object
      examples:
        - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
          customerId: 87d8e330-2878-4742-a86f-dbbb3bf522ac
          userId: 2c4a230c-5085-4924-a3e1-25fb4fc5965b
          assignedAt: string
      properties:
        id:
          type: string
          description: Id of the role assignment
          format: uuid
          readOnly: true
        userId:
          type: string
          format: uuid
          description: Id of user who is assigned a role
        assignedAt:
          type: string
          description: Date when the role was assigned
          format: date-time
          readOnly: true
        roleId:
          type: string
          description: Id of the assigned role.
          format: uuid
      required:
        - id
        - userId
        - assignedAt
        - roleId
    roleAssignment-resolved:
      title: roleAssignment-resolved
      type: object
      examples:
        - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
          userId: 2c4a230c-5085-4924-a3e1-25fb4fc5965b
          assignedAt: '2019-08-24T14:15:22Z'
          roleId: 7382d58e-652a-4905-b7c9-bcca1e0e5391
          userDisplayName: 'Doe, John'
          roleName: Customer Administrator
      properties:
        id:
          type: string
          description: Id of the role assignment
          format: uuid
          readOnly: true
        userId:
          type: string
          format: uuid
          description: Id of user who is assigned a role
        assignedAt:
          type: string
          description: Date when the role was assigned
          format: date-time
          readOnly: true
        roleId:
          type: string
          description: Id of the assigned role.
          format: uuid
        userDisplayName:
          type: string
          description: Display name of the user.
          readOnly: true
        roleName:
          type: string
          description: Name of the assigned role
          readOnly: true
      required:
        - id
        - userId
        - assignedAt
        - roleId
        - userDisplayName
        - roleName
  parameters:
    limit:
      name: limit
      in: query
      required: false
      schema:
        type: integer
        format: int32
        example: 100
        default: 100
        minimum: 10
      description: 'Pagination, page size limit.'
    offset:
      name: offset
      in: query
      required: false
      schema:
        type: integer
        format: int32
        minimum: 0
        example: 200
      description: 'Pagination, offset for returned page.'
    X-Total-Count:
      name: X-Total-Count
      in: header
      required: false
      schema:
        type: integer
        format: int32
      description: Total number of elements in the collection.
    collectionUuid:
      name: uuid
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: UUID of the collection element
  responses: {}
  examples: {}
