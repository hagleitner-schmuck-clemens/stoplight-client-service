openapi: 3.1.0
info:
  title: Standard API
  contact:
    name: Hagleitner Hygiene Internaltional GmbH
    url: 'http://www.hagleitner.com/'
    email: office@hagleitner.com
  version: '1.0'
  summary: The Client Service Standard API is a client agnostic API to the client servvice.
  description: The Client Service Standard API is a client agnostic API to the client servvice.
servers:
  - url: 'http://localhost:3000'
tags:
  - name: Branding
  - name: Customers
  - name: DataSynchronization
  - name: RoleAssignment
  - name: SelfRegistration
  - name: System
  - name: Users
  - name: Locations
paths:
  /customers:
    get:
      summary: ''
      tags:
        - Customers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/customer'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '403':
          description: Forbidden
      operationId: customers#get
      description: Gets a collection of customers. Only customers that the current user has permissions on will be included in the result.
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - schema:
            type: boolean
            default: false
          in: query
          name: includeDeleted
          description: 'Filters customers based on user status. If true only customers with status ''deleted'' will pass the filter, if false only customers with a status not equal to ''deleted'' will pass the filter.'
        - schema:
            type: boolean
            default: true
          in: query
          name: includeDeactivated
          description: 'Filters customers based on user status. If true only customers with status ''deactivated'' will pass the filter, if false only customers with a status not equal to ''deleted'' status will pass the filter.'
        - schema:
            type: boolean
          in: query
          name: includeActive
          description: 'Filters customers based on user status. If true only customers with status ''active'' will pass the filter, if false only customers with a status not equal to ''active'' will pass the filter.'
        - schema:
            type: string
            format: uuid
          in: query
          name: customerId
          description: Filters for customers based on the customerId. Note that the customer Id is only unique within all customers of the same reseller.
        - schema:
            type: string
            format: uuid
          in: query
          name: resellerId
          description: Filters for sub customer of the given reseller.
        - $ref: '#/components/parameters/Accept-Language'
      x-internal: false
    post:
      summary: ''
      operationId: customers#post
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: Creates a new customer.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customer'
      tags:
        - Customers
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
  '/customers/{id}':
    get:
      summary: ''
      tags:
        - Customers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/customer'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      operationId: customer#get
      description: 'Gets a single customer, defined by its customer id.'
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
      x-internal: false
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: Id of the customer
      - $ref: '#/components/parameters/Accept-Language'
    put:
      summary: ''
      operationId: customer#put
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-401-unauthorized'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: ''
      description: Updates a customer.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customer'
      tags:
        - Customers
      parameters: []
    patch:
      summary: ''
      operationId: customer#patch
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      description: Modifies attributes of a customer.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customer.PATCH'
      tags:
        - Customers
  '/customers/{id}/branding':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Id of the customer
    get:
      summary: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customerBranding'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      operationId: customer-branding#get
      description: Gets the branding assigned to this specific customer.
      parameters: []
      x-internal: false
      tags:
        - Customers
    put:
      summary: ''
      operationId: customer-branding#put
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      description: Creates or updates the customer branding.
      tags:
        - Customers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customerBranding'
  '/customers/{id}/locations':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Id of the customer
    get:
      summary: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/location'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      operationId: customer-locations#get
      description: Universal endpoint to get a collection of locations based on filter criteria. Collection is ordred by the location name ascending.
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - schema:
            type: string
            enum:
              - building
              - buildingArea
              - floor
              - floorArea
              - room
          in: query
          name: locationType
          description: Filters for locations of a specific type only
        - schema:
            type: string
            format: uuid
          in: query
          name: parentLocation
          description: Filters for locations that are direct children of this parent location.
        - schema:
            type: string
          in: query
          name: name
          description: Filters for location that match contains the given string in its name.
        - schema:
            type: string
          in: query
          name: code
          description: Filters for location that match contains the given string in its code.
      x-internal: false
      tags:
        - Locations
  '/customers/{id}/location-tree':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Id of the customer
    get:
      summary: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/location-tree'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      operationId: customer-location-tree#get
      description: Gets the whole location tree of a customer. Each level of the returned nested structure is ordered by sequence number and then name.
      parameters: []
      x-internal: false
      tags:
        - Locations
    put:
      summary: ''
      operationId: customer-location-tree#put
      responses:
        '200':
          description: OK
      description: Changes the whole location tree of a customer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/location-tree'
      tags:
        - Locations
  '/customers/{id}/rooms':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Id of the customer
    get:
      summary: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/location-room'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      operationId: customer-room#get
      description: Get all the room locations of a customer. Collection is orderd by location name.
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - schema:
            type: string
          in: query
          name: name
          description: Filters for rooms that contain the given value in their name
        - schema:
            type: string
          in: query
          name: code
          description: Filters for rooms that contain the given value in their code
      x-internal: false
      tags:
        - Locations
  /buildings:
    parameters: []
    post:
      summary: ''
      operationId: buildings#post
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/location-building'
      description: Creates a new building
      tags:
        - Locations
  '/buildings/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Id of the building
    get:
      summary: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/location-building'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      operationId: building#get
      description: Gets a single building
      parameters: []
      x-internal: false
      tags:
        - Locations
    put:
      summary: ''
      operationId: building#put
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: Updates a single building
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/location-building'
      tags:
        - Locations
    patch:
      summary: ''
      operationId: building#patch
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: Modifies a single building
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/location-building.PATCH'
        description: ''
      tags:
        - Locations
  /building-areas:
    parameters: []
    post:
      summary: ''
      operationId: building-areas#post
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/location-building-area'
      description: Creates a new building area
      tags:
        - Locations
  '/buildings-areas/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Id of the building
    get:
      summary: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/location-building-area'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      operationId: building-area#get
      description: Gets a single building
      parameters: []
      x-internal: false
      tags:
        - Locations
    put:
      summary: ''
      operationId: building-area#put
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: Updates a single building area
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/location-building-area'
      tags:
        - Locations
    patch:
      summary: ''
      operationId: building-area#patch
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: Modifies a single building area
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/location-building-area.PATCH'
        description: ''
      tags:
        - Locations
  /floors:
    parameters: []
    post:
      summary: ''
      operationId: floors#post
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/location-floor'
      description: Creates a new floor
      tags:
        - Locations
  '/floors/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Id of the floor
    get:
      summary: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/location-floor'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      operationId: floor#get
      description: Gets a single floor
      parameters: []
      x-internal: false
      tags:
        - Locations
    put:
      summary: ''
      operationId: floor#put
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: Updates a single floor
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/location-floor'
      tags:
        - Locations
    patch:
      summary: ''
      operationId: floor#patch
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: Modifies a single floor
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/location-floor.PATCH'
        description: ''
      tags:
        - Locations
  /floor-areas:
    parameters: []
    post:
      summary: ''
      operationId: floor-areas#post
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/location-floor-area'
      description: Creates a new floor area
      tags:
        - Locations
  '/floor-areas/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Id of the floor area
    get:
      summary: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/location-floor-area'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      operationId: floor-area#get
      description: Gets a single floor
      parameters: []
      x-internal: false
      tags:
        - Locations
    put:
      summary: ''
      operationId: floor-area#put
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: Updates a single floor area
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/location-floor-area'
      tags:
        - Locations
    patch:
      summary: ''
      operationId: floor-area#patch
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: Modifies a single floor area
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/location-floor.PATCH'
        description: ''
      tags:
        - Locations
  /rooms:
    parameters: []
    post:
      summary: ''
      operationId: rooms#post
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/location-room'
      description: Creates a new room
      tags:
        - Locations
  '/rooms/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Id of the room
    get:
      summary: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/location-room'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      operationId: room#get
      description: Gets a single room
      parameters: []
      x-internal: false
      tags:
        - Locations
    put:
      summary: ''
      operationId: room#put
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: Updates a single room
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/location-room'
      tags:
        - Locations
    patch:
      summary: ''
      operationId: room#patch
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: Modifies a single room
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/location-room.PATCH'
        description: ''
      tags:
        - Locations
  '/customers/{id}/effective-branding':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Id of the customer
    get:
      summary: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/branding'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      operationId: customer-effective-branding#get
      description: Gets the effecive branding of this customer.
      parameters: []
      x-internal: false
      tags:
        - Customers
  '/customers/{id}/effective-role-assignments':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Id of the customer
    get:
      summary: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/roleAssignment-customer'
      operationId: customer-effective-roles#get
      description: Gets effective roles applied to this customer.
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - schema:
            type: string
            format: uuid
          in: query
          name: userId
          description: Filters the effective roles to those given to the provided user id.
      x-internal: false
      tags:
        - RoleAssignment
  '/customers/{id}/condition-relation':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Id of the customer
    get:
      summary: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customerRelation'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      operationId: customer-condition-relation#get
      x-internal: false
      description: Gets the condition owner relation of this customer. I.e. the relation to another customer whose conditions apply to this customer.
      parameters: []
      tags:
        - Customers
    post:
      summary: ''
      operationId: customers-condition-relations#post
      responses:
        '200':
          description: OK
      description: Creates a relation from this customer to a condition provider (replacing the existing relation).
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customerRelation'
      tags:
        - Customers
  '/customers/{id}/reseller':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Id of the customer
    get:
      summary: ''
      tags:
        - Customers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customer'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
      operationId: customer-reseller#get
      x-internal: false
      description: Gets the reseller of this customer.
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
  '/customers/{id}/company-hierarchy-relation':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Id of the customer
    get:
      summary: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customerRelation'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      operationId: customer-customer-hierarchy-relation#get
      x-internal: false
      description: Gets the customer hierarchy relation of this customer. I.e. the relation to its parent customer.
      parameters: []
      tags:
        - Customers
    post:
      summary: ''
      operationId: customers-customer-hierarchy-relations#post
      responses:
        '200':
          description: OK
      description: Creates a customer-hierarchy from this customer to a reseller (replacing the existing relation).
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customerRelation'
      tags:
        - Customers
  '/customers/{id}/invoice-relation':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Id of the customer
    get:
      summary: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customerRelation'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      operationId: customer-invoice-relation#get
      x-internal: false
      description: Gets the invoice relation of this customer. I.e. the relation to another customer who get the invoices for this customer.
      parameters: []
      tags:
        - Customers
    post:
      summary: ''
      operationId: customers-invoice-relations#post
      responses:
        '200':
          description: OK
      description: Creates an invoice from this customer to a reseller (replacing the existing relation).
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customerRelation'
      tags:
        - Customers
  '/customers/{id}/reseller-relation':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Id of the customer
    get:
      summary: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customerRelation'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      operationId: customer-reseller-relation#get
      x-internal: false
      description: Gets the reseller relation of this customer. I.e. the relation to its reseller.
      parameters: []
      tags:
        - Customers
    post:
      summary: ''
      operationId: customers-reseller-relations#post
      responses:
        '200':
          description: OK
      description: Creates a reseller from this customer to a reseller (replacing the existing relation).
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customerRelation'
      tags:
        - Customers
  '/customers/{id}/role-assignments':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Id of the customer
    get:
      summary: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/roleAssignment-customer'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      operationId: customer-role-assignments#get
      description: Gets roles-assignments of this customer. Role-assignments are ordered by the assignment date ascending (oldest first).
      parameters:
        - schema:
            type: integer
            minimum: 1
            default: 100
            maximum: 1000
          in: query
          name: limit
          description: 'Pagination, maximum page size'
        - schema:
            type: integer
            minimum: 0
          in: query
          name: offset
          description: 'Pagination, page offset'
        - schema:
            type: string
          in: query
          name: userId
          description: If given filters the list for roles assigned to that specific user
      x-internal: false
      tags:
        - RoleAssignment
    post:
      summary: ''
      operationId: customers-assigned-roles#post
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      description: Creates a new role-assignement for this customer.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/roleAssignment-customer'
      tags:
        - RoleAssignment
  '/customers/{id}/role-inheritance':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Id of the customer
    get:
      summary: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customer-role-inheritance'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      operationId: customer-role-inheritance#get
      description: Gets the role inheritance settings for this customer.
      parameters: []
      x-internal: false
      tags:
        - Customers
    put:
      summary: ''
      operationId: customers-role-inheritance#put
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customer-role-inheritance'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      tags:
        - Customers
      description: Configures the role inheritance settings for a customer.
  '/customer-role-assignments/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Id of the customer
    get:
      summary: ''
      tags:
        - Customers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/roleAssignment-customer'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-401-unauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      operationId: customer-role-assignment#get
      description: Gets a specific customer role-assignemnt.
      parameters:
        - schema:
            type: string
          in: query
          name: Id
          description: Id of the role assignment
      x-internal: false
    delete:
      summary: ''
      operationId: customer-role-assignment#delete
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      description: Deletes a customer role-assignment.
      parameters:
        - schema:
            type: string
          in: query
          name: Id
          description: Id of the role assignment.
      tags:
        - RoleAssignment
  '/customers/{id}/self-registration-credentials/current':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Id of the customer
    get:
      summary: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/selfRegistrationCredential'
        '400':
          description: Bad Request
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
              examples:
                Self registration without customer number:
                  value:
                    type: self-registration-credentials-without-customernumber
                    title: Self registration only possible for customers with a customer number
                    detail: Self-registration credentials can only be issued for customers with an assigned customer number.
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      operationId: self-registration-credential-current#get
      x-internal: false
      description: Gets the self-registration credentials for the current date. If that credential was not created before the server will create the credantial when this endpoint is called.
      parameters: []
      tags:
        - SelfRegistration
  '/customers/{id}/self-registration-credentials':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Id of the customer
    get:
      summary: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/selfRegistrationCredential'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
      operationId: self-registration-credentials#get
      x-internal: false
      description: Gets a list of currently active self-registration credentials. List is ordered ascending by ValidTill date.
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      tags:
        - SelfRegistration
  '/customers/{id}/self-registration-credentials/{selfRegistrationCredentialId}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Id of the customer
      - schema:
          type: string
        name: selfRegistrationCredentialId
        in: path
        required: true
    get:
      summary: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/selfRegistrationCredential'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      operationId: self-registration-credential#get
      x-internal: false
      description: Gets a list of currently active self-registration informations
      parameters: []
      tags:
        - SelfRegistration
    delete:
      summary: ''
      operationId: self-registration-credential#delete
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      description: 'Delete a self registration information. '
      tags:
        - SelfRegistration
  '/customers/{id}/reseller-path-elements':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Id of the customer
    get:
      summary: ''
      tags:
        - Customers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/customer'
      operationId: customer-reseller-path-elements#get
      x-internal: false
      description: Gets all the customers on the reseller path from the root to this customer as sorted list.
      parameters: []
  '/customers/{id}/customer-hierarchy-path-elements':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Id of the customer
    get:
      summary: ''
      tags:
        - Customers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/customer'
      operationId: customer-customer-hierarchy-path-elements#get
      x-internal: false
      description: Gets all the customers on the customer-hierarchy path from the root to this customer as sorted list.
      parameters: []
  '/customers/{id}/invoice-path-elements':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Id of the customer
    get:
      summary: ''
      tags:
        - Customers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/customer'
      operationId: customer-invoice--elements#get
      x-internal: false
      description: Gets all the customers on the invoicing path from the root to this customer as sorted list.
      parameters: []
  '/customers/{id}/condition-path-elements':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Id of the customer
    get:
      summary: ''
      tags:
        - Customers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/customer'
      operationId: customer-condition-path-elements#get
      x-internal: false
      description: Gets all the customers on the condition path from the root to this customer as sorted list.
      parameters: []
  '/customers/{id}/sub-customers':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Id of the customer
    get:
      summary: ''
      tags:
        - Customers
      operationId: customer-sub-customers#get
      x-internal: false
      description: Gets all the sub-customers of a customer (direct descendants in the reseller-relationship-tree). Collection is sorted by name1.
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: {}
  '/customers/{id}/subsidiaries':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Id of the customer
    get:
      summary: ''
      tags:
        - Customers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/customer'
      operationId: customer-subsidiaries#get
      x-internal: false
      description: Gets all the subsidiaries of a customer (direct descendants in the company-hierarchy-relationship-tree). Collection is sorted by name1.
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
  '/customers/{id}/invoice-sources':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Id of the customer
    get:
      summary: ''
      tags:
        - Customers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/customer'
      operationId: customer-invoice-sources#get
      x-internal: false
      description: Gets all the invoice sources of a customer (direct descendants in the invoicing-relationship-tree). Collection is sorted by name1.
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
  '/customers/{id}/beneficiaries':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Id of the customer
    get:
      summary: ''
      tags:
        - Customers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/customer'
      operationId: customer-beneficiaries#get
      x-internal: false
      description: Gets all the beneficiares of a customer (direct descendants in the condition-relationship-tree). Collection is sorted by name1.
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
  /synchronization/customers:
    parameters: []
    get:
      summary: ''
      operationId: synchronization-customers#get
      responses:
        '200':
          description: OK
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total count of resources in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/customer-synchronization'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      description: Gets customers with detail information useful for synchronization with other systems.
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - schema:
            type: boolean
            default: false
          in: query
          name: includeDeleted
          description: 'Filters customers based on user status. If true only customers with status ''deleted'' will pass the filter, if false only customers with a status not equal to ''deleted'' will pass the filter.'
        - schema:
            type: boolean
            default: true
          in: query
          name: includeDeactivated
          description: 'Filters customers based on user status. If true only customers with status ''deactivated'' will pass the filter, if false only customers with a status not equal to ''deleted'' status will pass the filter.'
        - schema:
            type: boolean
          in: query
          name: includeActive
          description: 'Filters customers based on user status. If true only customers with status ''active'' will pass the filter, if false only customers with a status not equal to ''active'' will pass the filter.'
        - schema:
            type: string
            format: uuid
            example: 98aea202-354b-4912-81f7-364e609fe650
          in: query
          name: synchronizationId
          description: Filters for a customer with the given synchronization Id. Only a customer with an exact match will pass the filter.
        - schema:
            type: string
            example: '2021-11-12T21:15:13.1234+01:00'
          in: query
          name: latestUpdatedAfter
          description: Filters for customers  that were last updated in the system after (>) the given date.
        - schema:
            type: string
            example: '2021-11-12T21:15:13.1234+01:00'
            format: date-time
          in: query
          name: createdBefore
          description: 'Filters for customers  that were created in the system before (<) the given date. '
        - schema:
            type: boolean
          in: query
          name: synchronizationIdAvailable
          description: 'Filters for customers based on the availability of a synchronizationId. If set to true only users with a non-empty synchronizationId will pass the filter, if set to false only users with an empty synchronizationId will pass the filter.  '
        - schema:
            type: string
          in: query
          name: customerNumber
          description: Filters for customers based on the customer number. Note that the customer Id is only unique within all customers of the same reseller.
        - schema:
            type: string
            format: uuid
          in: query
          name: resellerId
          description: Filters for sub customer of the given reseller.
        - schema:
            type: string
          in: query
          name: nameStartsWith
          description: Filters for customers whose name starts with the given string. String matching is done case insensitive..
      tags:
        - DataSynchronization
    post:
      summary: ''
      operationId: synchronization-customer#post
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
      description: Creates a customer with detail information useful for synchronization with other systems.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customer-synchronization'
      tags:
        - DataSynchronization
  '/synchronization/customers/{id}/role-assignments/{role-assignment-id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Id of the customer
      - schema:
          type: string
        name: role-assignment-id
        in: path
        required: true
        description: Id of the role assignment
    get:
      summary: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/roleAssignment-customer'
      operationId: synchronization-customer-role-assignment#get
      description: 'Gets role-assignemnts '
      parameters:
        - schema:
            type: string
          in: query
          name: Id
          description: Id of the role assignment
      x-internal: true
      tags:
        - DataSynchronization
  '/synchronization/customers/{id}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: Id of the customer
    get:
      summary: ''
      operationId: synchronization-customer#get
      responses:
        '200':
          description: OK
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total count of resources in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/customer-synchronization'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: Gets customer with detail information useful for synchronization with other systems.
      parameters: []
      tags:
        - DataSynchronization
        - Users
    put:
      summary: ''
      operationId: synchronization-customer#put
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: Updates a customer with detailled information for synchronization processes.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customer-synchronization'
      tags:
        - DataSynchronization
  '/synchronization/customers/{id}/condition-relation':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: Id of the customer
    get:
      summary: ''
      operationId: synchronization-customer-condition-relation#get
      responses:
        '200':
          description: OK
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total count of resources in the collection.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customerRelation-synchronization'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '401':
          description: Unauthorized
        '402':
          description: Payment Required
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: 'Gets the condition relation of this customer (i.e. looking up the relation tree) with detail information useful for synchronization with other systems. '
      parameters: []
      tags:
        - DataSynchronization
        - Users
    put:
      summary: ''
      operationId: synchronization-customer-condition-relation#put
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: Updates a customer's condition relation with detailled information for synchronization processes.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user-synchronization'
      tags:
        - DataSynchronization
  '/synchronization/customers/{id}/customer-condition-relations':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: Id of the customer
    get:
      summary: ''
      operationId: synchronization-customer-condition-relations#get
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/customerRelation-synchronization'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: Gets all reseller relations of this customer i.e. all relations between customers where this customer is the reseller.
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      tags:
        - DataSynchronization
        - Users
  '/synchronization/customers/{id}/customer-hierarchy-relation':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: Id of the customer
    get:
      summary: ''
      operationId: synchronization-customer-customer-hierarchy-relation#get
      responses:
        '200':
          description: OK
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total count of resources in the collection.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customerRelation-synchronization'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: 'Gets the customer-hierarchy relation of this customer (i.e. looking up the relation tree) with detail information useful for synchronization with other systems. '
      parameters: []
      tags:
        - DataSynchronization
        - Users
    put:
      summary: ''
      operationId: synchronization-customer-customer-hierarchy-relation#put
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: Updates a customer's customer-hierarchy relation with detailled information for synchronization processes.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user-synchronization'
      tags:
        - DataSynchronization
  '/synchronization/customers/{id}/customer-hierarchy-relations':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: Id of the customer
    get:
      summary: ''
      operationId: synchronization-customer-customer-hierarchy-relations#get
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/customerRelation-synchronization'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: Gets all reseller relations of this customer i.e. all relations between customers where this customer is the reseller.
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      tags:
        - DataSynchronization
        - Users
  '/synchronization/customers/{id}/invoice-relation':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: Id of the customer
    get:
      summary: ''
      operationId: synchronization-customer-invoice-relation#get
      responses:
        '200':
          description: OK
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total count of resources in the collection.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customerRelation-synchronization'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: ''
        '500':
          description: Internal Server Error
      description: 'Gets the invoice relation of this customer (i.e. looking up the reseller relation) with detail information useful for synchronization with other systems. '
      parameters: []
      tags:
        - DataSynchronization
        - Users
    put:
      summary: ''
      operationId: synchronization-customer-invoice-relation#put
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: Updates a customer's invoice relation with detailled information for synchronization processes.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user-synchronization'
      tags:
        - DataSynchronization
  '/synchronization/customers/{id}/invoice-relations':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: Id of the customer
    get:
      summary: ''
      operationId: synchronization-customer-invoice-relations#get
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: null
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: Gets all reseller relations of this customer i.e. all relations between customers where this customer is the reseller.
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      tags:
        - DataSynchronization
        - Users
  '/synchronization/customers/{id}/reseller-relation':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: Id of the customer
    get:
      summary: ''
      operationId: synchronization-customer-reseller-relation#get
      responses:
        '200':
          description: OK
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total count of resources in the collection.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customerRelation-synchronization'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: 'Gets the reseller relation of this customer (i.e. looking up the reseller relation) with detail information useful for synchronization with other systems. '
      parameters: []
      tags:
        - DataSynchronization
        - Users
    put:
      summary: ''
      operationId: synchronization-customer-reseller-relation#put
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: Updates a customer's reseller relation with detailled information for synchronization processes.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user-synchronization'
      tags:
        - DataSynchronization
  '/synchronization/customers/{id}/reseller-relations':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: Id of the customer
    get:
      summary: ''
      operationId: synchronization-customer-reseller-relations#get
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/customerRelation-synchronization'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: Gets all reseller relations of this customer i.e. all relations between customers where this customer is the reseller.
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      tags:
        - DataSynchronization
        - Users
  '/synchronization/customers/{id}/role-assignments':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Id of the customer
    get:
      summary: ''
      tags:
        - Customers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/roleAssignment-customer'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      operationId: synchronization-customer-role-assignments#get
      description: Gets roles-assignments of this customer together with synchronization data. Role-assignments are ordered by the assignment date ascending (oldest first).
      parameters:
        - schema:
            type: integer
            minimum: 1
            default: 100
            maximum: 1000
          in: query
          name: limit
          description: 'Pagination, maximum page size'
        - schema:
            type: integer
            minimum: 0
          in: query
          name: offset
          description: 'Pagination, page offset'
        - schema:
            type: string
          in: query
          name: userId
          description: If given filters the list for roles assigned to that specific user
      x-internal: false
    post:
      summary: ''
      operationId: customer-assigned-roles#post
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: Creates a new role-assignement for this customer.
      tags:
        - Customers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/roleAssignment-customer'
  /synchronization/users:
    parameters: []
    get:
      summary: ''
      operationId: synchronization-users#get
      responses:
        '200':
          description: OK
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total count of resources in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/user-synchronization'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: Gets registered users with detail information useful for synchronization with other systems.
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - schema:
            type: boolean
            default: false
          in: query
          name: includeDeleted
          description: 'Filters users based on user status. If true only users with status ''deleted'' will pass the filter, if false only users with a status not equal to ''deleted'' will pass the filter.'
        - schema:
            type: boolean
            default: true
          in: query
          name: includeDeactivated
          description: 'Filters users based on user status. If true only users with status ''deactivated'' will pass the filter, if false only users with a status not equal to ''deleted'' status will pass the filter.'
        - schema:
            type: boolean
          in: query
          name: includeActive
          description: 'Filters users based on user status. If true only uses with status ''active'' will pass the filter, if false only users with a status not equal to ''active'' will pass the filter.'
        - schema:
            type: string
            format: email
            example: jon@doe.com
          in: query
          name: emailAddress
          description: Filter for user with the given e-mail address. The match is case insensitive.
        - schema:
            type: string
            format: uuid
            example: 98aea202-354b-4912-81f7-364e609fe650
          in: query
          name: synchronizationId
          description: Filters for a user with the given synchronization Id. Only a user with an exact match will pass the filter.
        - schema:
            type: string
            example: '2021-11-12T21:15:13.1234+01:00'
          in: query
          name: lastUpdatedAfter
          description: Filters for users that were last updated in the system after (>) the given date.
        - schema:
            type: string
            example: '2021-11-12T21:15:13.1234+01:00'
          in: query
          name: createdBefore
          description: 'Filters for users that were created in the system before (<) the given date. '
        - schema:
            type: boolean
          in: query
          name: synchronizationIdAvailable
          description: 'Filters for users based on the availability of a synchronizationId. If set to true only users with a non-empty synchronizationId will pass the filter, if set to false only users with an empty synchronizationId will pass the filter.  '
      tags:
        - DataSynchronization
        - Users
    post:
      summary: ''
      operationId: synchronization-user#post
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: Creates a new user together with synchronization data.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user-synchronization'
      tags:
        - DataSynchronization
  '/synchronization/users/{id}':
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: UUID of the collection element
    get:
      summary: ''
      operationId: synchronization-user#get
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user-synchronization'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: Gets a specific user with detail information useful for synchronization with other systems.
      tags:
        - DataSynchronization
    put:
      summary: ''
      operationId: synchronization-user#put
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: Updates a suer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user-synchronization'
      tags:
        - DataSynchronization
    patch:
      summary: ''
      operationId: synchronization-user#patch
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user-synchronization'
      tags:
        - DataSynchronization
      description: Updates a user resource with the option to modify all synchronizaton information.
  /system/instance-branding:
    get:
      summary: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/branding'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      operationId: instance-branding#get
      description: Gets the instance branding definition.
      tags:
        - System
    put:
      summary: ''
      operationId: instance-branding#put
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/branding'
      description: Sets the branding for the whole instance
      tags:
        - System
    parameters: []
  /system/role-assignments:
    parameters: []
    get:
      summary: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/roleAssignment-customer'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      operationId: systemr-role-assignments#get
      description: Gets role-assignments for the system. Role-assignments are ordered by the assignment date ascending (oldest first).
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - schema:
            type: string
          in: query
          name: userId
          description: If given filters the list for roles assigned to that specific user.
      x-internal: false
      tags:
        - RoleAssignment
    post:
      summary: ''
      operationId: system-role-assignments#post
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: Creates a new role assignement for this customer.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/roleAssignment-user'
      tags:
        - RoleAssignment
  '/system/role-assignments/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Id of the customer
    get:
      summary: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/roleAssignment-customer'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      operationId: system-role-assignment#get
      description: Gets a role assignement between users and the system.
      parameters:
        - schema:
            type: string
          in: query
          name: Id
          description: Id of the role assignment
      x-internal: false
      tags:
        - RoleAssignment
    delete:
      summary: ''
      operationId: system-role-assignment#delete
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: Deletes a system role assignment.
      parameters:
        - schema:
            type: string
          in: query
          name: Id
          description: Id of the role assignment.
      tags:
        - RoleAssignment
  /system/roles:
    get:
      summary: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  cod:
                    type: string
                  name:
                    type: string
                  propagateToResellerCustomer:
                    type: string
                  propagateToSubsidiaries:
                    type: string
                  propagateToInvoiceSources:
                    type: string
                  propagateToBeneficiaries:
                    type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      operationId: system-roles#get
      description: Gets a list of roles defined for the system.
      parameters:
        - schema:
            type: string
          in: query
          name: limit
        - schema:
            type: string
          in: query
          name: offset
        - schema:
            type: string
          in: query
          name: user
      x-internal: false
      tags:
        - System
    parameters: []
  /users:
    parameters: []
    get:
      summary: ''
      operationId: users#get
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
      description: Gets registered users.
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - schema:
            type: integer
          in: header
          name: X-Total-Count
          description: Total number of elements in the collection.
        - schema:
            type: boolean
          in: query
          name: includeDeleted
          description: Include or exclude uses with status 'deleted'.
        - schema:
            type: boolean
          in: query
          name: includeDeactivated
          description: Include or exclude uses with status 'deactivated'.
        - schema:
            type: boolean
          in: query
          name: includeActive
          description: Include or exclude uses with status 'active'.
      tags:
        - Users
    post:
      summary: ''
      operationId: users#post
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
      tags:
        - Users
      description: Creates a new user.
  '/users/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: ''
      operationId: user#get
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: Gets a specific user.
      tags:
        - Users
    put:
      summary: ''
      operationId: user#put
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: Updates a specific user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
      tags:
        - Users
  '/users/{id}/mask':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    put:
      summary: ''
      operationId: user-mask#put
      responses:
        '200':
          description: OK
      description: 'Will remove all personal information of a user, thus removing the relation to a natural person.'
      tags:
        - Users
  '/users/{id}/status':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: ''
      operationId: user-status#get
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userStatus'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: Gets a the status of a specific user
      tags:
        - Users
    put:
      summary: ''
      operationId: user-status#put
      description: Updates a user's status
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      tags:
        - Users
  '/users/{id}/customer-roles':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: ID of  the user in the HsM system.
    get:
      summary: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/roleAssignment-user'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      operationId: user-customerroles#get
      description: 'Gets a list of roles the user has on a customer, or on all customers. Result will be ordered by customerId then role code.'
      parameters:
        - schema:
            type: string
            format: uuid
          in: query
          name: customerId
          description: If given filters the results for a specific customer only.
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      tags:
        - RoleAssignment
  '/users/{id}/system-roles':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: ID of  the user in the HsM system.
    get:
      summary: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/roleAssignment-user'
        '201':
          description: Created
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      operationId: user-systemroles#get
      description: Gets a list of systemroles assigned to that user.
      parameters:
        - schema:
            type: integer
          in: query
          name: limit
          description: 'Pagination, page size limit'
        - schema:
            type: integer
          in: query
          name: offset
          description: 'Pagination, page offset'
      tags:
        - RoleAssignment
  '/locations/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Id of the location
    get:
      summary: ''
      tags:
        - Locations
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/location'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      operationId: location#get
      description: 'Gets a single location. '
    patch:
      summary: ''
      operationId: location#patch
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/location.PATCH'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: Modifies a location
      tags:
        - Locations
  '/locations/{id}/sub-locations':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Id of the location
    get:
      summary: ''
      tags:
        - Locations
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/location'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      operationId: location-sublocations#get
      description: Returns all (direct) chrildren of this location.
    post:
      summary: ''
      operationId: location-sublocations#post
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: Creates a new sub-location of this location
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/location'
      tags:
        - Locations
  '/locations/{id}/path-elements':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Id of the location
    get:
      summary: ''
      tags:
        - Locations
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/location'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      operationId: location-path-elements#get
      description: 'Returns all locations on the location-tree path to this location, including this location. The returned array is ordered by the tree-level of the locations i.e. the root locatio first.'
components:
  schemas:
    branding:
      description: Describes the branding of the instance or the effective branding for a customer.
      type: object
      properties:
        productName:
          type: string
          minLength: 1
        displayModeDark:
          type: object
          properties:
            companyLogo:
              type: string
              minLength: 1
            navigationBarCompanyLogo:
              type: string
              minLength: 1
            mainColor300:
              type: object
              properties:
                hexCode:
                  type: string
                  minLength: 1
              required:
                - hexCode
            mainColor500:
              type: object
              properties:
                hexCode:
                  type: string
                  minLength: 1
              required:
                - hexCode
            mainColor700:
              type: object
              properties:
                hexCode:
                  type: string
                  minLength: 1
              required:
                - hexCode
            navigationBarColor:
              type: object
              properties:
                hexCode:
                  type: string
                  minLength: 1
              required:
                - hexCode
            navigationBarContrastColor:
              type: object
              properties:
                hexCode:
                  type: string
                  minLength: 1
              required:
                - hexCode
            selectionColor:
              type: object
              properties:
                hexCode:
                  type: string
                  minLength: 1
              required:
                - hexCode
          required:
            - companyLogo
            - navigationBarCompanyLogo
            - mainColor300
            - mainColor500
            - mainColor700
            - navigationBarColor
            - navigationBarContrastColor
            - selectionColor
        displayModeLight:
          type: object
          properties:
            companyLogo:
              type: string
              minLength: 1
            navigationBarCompanyLogo:
              type: string
              minLength: 1
            mainColor300:
              type: object
              properties:
                hexCode:
                  type: string
                  minLength: 1
              required:
                - hexCode
            mainColor500:
              type: object
              properties:
                hexCode:
                  type: string
                  minLength: 1
              required:
                - hexCode
            mainColor700:
              type: object
              properties:
                hexCode:
                  type: string
                  minLength: 1
              required:
                - hexCode
            navigationBarColor:
              type: object
              properties:
                hexCode:
                  type: string
                  minLength: 1
              required:
                - hexCode
            navigationBarContrastColor:
              type: object
              properties:
                hexCode:
                  type: string
                  minLength: 1
              required:
                - hexCode
            selectionColor:
              type: object
              properties:
                hexCode:
                  type: string
                  minLength: 1
              required:
                - hexCode
          required:
            - companyLogo
            - navigationBarCompanyLogo
            - mainColor300
            - mainColor500
            - mainColor700
            - navigationBarColor
            - navigationBarContrastColor
            - selectionColor
        instanceOperator:
          type: string
          minLength: 1
        clientSpecificOptions:
          type: object
          properties:
            webPortal:
              type: object
              properties:
                favIcon:
                  type: string
                  minLength: 1
              required:
                - favIcon
          required:
            - webPortal
      required:
        - productName
        - displayModeDark
        - displayModeLight
        - instanceOperator
        - clientSpecificOptions
      x-examples:
        example-1:
          productName: senseManagement
          displayModeDark:
            companyLogo: 'https://hagleitner.com/logos/hagleitnerLogo.dark.svg'
            navigationBarCompanyLogo: 'https://hagleitner.com/logos/hagleitnerLogo.dark.navigationbar.svg'
            mainColor300:
              hexCode: '#123456'
            mainColor500:
              hexCode: '#123456'
            mainColor700:
              hexCode: '#123456'
            navigationBarColor:
              hexCode: '#123456'
            navigationBarContrastColor:
              hexCode: '#123456'
            selectionColor:
              hexCode: '#123456'
          displayModeLight:
            companyLogo: 'https://hagleitner.com/logos/hagleitnerLogo.light.svg'
            navigationBarCompanyLogo: 'https://hagleitner.com/logos/hagleitnerLogo.light.navigationbar.svg'
            mainColor300:
              hexCode: '#123456'
            mainColor500:
              hexCode: '#123456'
            mainColor700:
              hexCode: '#123456'
            navigationBarColor:
              hexCode: '#123456'
            navigationBarContrastColor:
              hexCode: '#123456'
            selectionColor:
              hexCode: '#123456'
          instanceOperator: Hagleitner
          clientSpecificOptions:
            webPortal:
              favIcon: 'https://hagleitner.com/logos/hsm-favicon.svg'
    customer:
      type: object
      title: customer
      description: Describes a customer.
      properties:
        id:
          type: string
          format: uuid
          description: Id of the user within the HsM system
          readOnly: true
        code:
          type: string
          example: HHAT
          description: A code that -if given - uniquely identifies the customer within the whole system
        name1:
          type: string
          example: HGM Facility care & management Ltd.
          maxLength: 80
          description: The customer name
        name2:
          type: string
          example: A FacilityWiz subsidiary
          maxLength: 80
          description: Part of the customer name that is usually written on a second line in postal adresses
        name3:
          type: string
          example: HGM Facility care & management Ltd.
          maxLength: 80
          description: Part of the customer name that is usually written on a third line in postal adresses
        name4:
          type: string
          example: HGM Facility care & management Ltd.
          maxLength: 80
          description: Part of the customer name that is usually written on a forth line in postal adresses
        address1:
          type: string
          example: Huey Avenue 33b
          maxLength: 80
        address2:
          type: string
          example: The Holo Building
          maxLength: 80
        city:
          type: string
          example: London
          maxLength: 80
        postalCode:
          type: string
          example: W3BX
          maxLength: 20
        countryCode:
          type: string
          maxLength: 2
          example: GB
          description: ISO 3166-1 alpha-2 code
        customerNumber:
          type: string
          maxLength: 20
          example: 21-0789-B
          description: The customer number used by the reseller to uniquely identify this customer
        emailAddress:
          type: string
          description: The companies main e-mail address
          format: email
          example: office@hgmfacility.com
          maxLength: 256
        phoneNumber:
          type: string
          description: The companies main phone number
          example: +44 256 51512
          maxLength: 256
        vatIdentificationNumber:
          type: string
          description: The VAT identification number of the customer
          example: +44 256 51512
          maxLength: 256
        preferredCulture:
          type: string
          description: The culture the company usually thinks in. Given as IETF BCP 47 language tag. If not given the system will use a default invariant culture.
          example: en-GB
          maxLength: 35
        status:
          type: string
          enum:
            - active
            - inactive
            - deleted
          description: The status of the user in terms of his possibilty to interact with the system
          default: active
          readOnly: true
        isReseller:
          type: boolean
          description: Defines if a customer is a reseller. Customers marked as resellers can use HsM's reseller features.
        lastUpdatedAt:
          type: string
          description: Describes when the user was last modified within HsM.
          format: date-time
          example: '2021-08-23T16:15:18.123+01:00'
          readOnly: true
        resellerId:
          type: string
          format: uuid
          description: Specifies the mandatory reseller for this customer
          writeOnly: true
        externallyManaged:
          type: boolean
          description: Defines if this is a externally managed customer. I.e. the customer details are managed by another system and synchronized to HsM and should therefore not be modified in HsM.
          readOnly: true
      required:
        - id
        - name1
        - countryCode
        - emailAddress
        - isReseller
        - resellerId
        - externallyManaged
    customer-role-inheritance:
      type: object
      title: customer-role-inheritance
      description: Describes a customer.
      properties:
        AllowRoleInheritanceFromReseller:
          type: boolean
          description: Defines if roles applicable to the customer's reseller and marked for propagation down the reseller relation tree shall be actually inherited by this customer.
        AllowRoleInheritanceFromParentCustomer:
          type: boolean
          description: Defines if roles applicable to the customer's parent customer and marked for propagation down the customer hierarchy relation tree shall be actually inherited by this customer.
        AllowRoleInheritanceFromInvoiceRecipient:
          type: boolean
          description: Defines if roles applicable to the customer's invoice recipient and marked for propagation down the invoice relation tree shall be actually inherited by this customer.
        AllowRoleInheritanceFromConditionOwner:
          type: boolean
          description: Defines if roles applicable to the customer's condition owner and marked for propagation down the condition relation tree shall be actually inherited by this customer.
    customer.PATCH:
      type: object
      title: customer
      description: Describes a customer.
      properties:
        code:
          type: string
          example: HHAT
          description: 'A code that -if given - uniquely identifies the customer within the whole system. '
        name:
          type: string
          example: John
          maxLength: 50
        address:
          type: string
          example: Doe
          maxLength: 50
        city:
          type: string
        postalCode:
          type: string
        countryCode:
          type: string
          description: ISO 3166-1 alpha-2 code
        emailAddress:
          type: string
          description: The users e-mail address. This address must be unique within all non deleted users in the HsM system.
          format: email
          example: john@doe.com
          maxLength: 256
        preferredCulture:
          type: string
          description: |-
            The culture the user wants to use in interaction with the system. Given as IETF BCP 47 language tag. If not given the system will use a default invariatn culture. 

            This cutlure is a default for this user, client systems might however choose to use another culture for interaction with the HsM system.
          example: de-AT
          maxLength: 35
        status:
          type: string
          enum:
            - active
            - inactive
            - deleted
          description: The status of the user in terms of his possibilty to interact with the system.
          default: active
          readOnly: true
        isReseller:
          type: boolean
          description: Defines if a customer is a reseller. Customer marked as resellers can use HsM's reseller features.
        resellerId:
          type: string
          format: uuid
          description: Specifies the mandatory reseller for this customer.
          writeOnly: true
        externallyManaged:
          type: boolean
          description: Defines if this is a externally managed customer. I.e. the customer details are managed by another system and synchronized to HsM and should therefore not be modified in HsM.
          readOnly: true
    customer-synchronization:
      type: object
      title: customer-synchronization
      description: Describes a customer of the HsM system together with information relevant for synchronization with other business systems.
      properties:
        id:
          type: string
          format: uuid
          description: Id of the user within the HsM system
          readOnly: true
        code:
          type: string
          example: HHAT
          description: A code that -if given - uniquely identifies the customer within the whole system
        name1:
          type: string
          example: HGM Facility care & management Ltd.
          maxLength: 80
          description: The customer name
        name2:
          type: string
          example: A FacilityWiz subsidiary
          maxLength: 80
          description: Part of the customer name that is usually written on a second line in postal adresses
        name3:
          type: string
          example: HGM Facility care & management Ltd.
          maxLength: 80
          description: Part of the customer name that is usually written on a third line in postal adresses
        name4:
          type: string
          example: HGM Facility care & management Ltd.
          maxLength: 80
          description: Part of the customer name that is usually written on a forth line in postal adresses
        address1:
          type: string
          example: Huey Avenue 33b
          maxLength: 80
        address2:
          type: string
          example: The Holo Building
          maxLength: 80
        city:
          type: string
          example: London
          maxLength: 80
        postalCode:
          type: string
          example: W3BX
          maxLength: 20
        countryCode:
          type: string
          maxLength: 2
          example: GB
          description: ISO 3166-1 alpha-2 code
        customerNumber:
          type: string
          maxLength: 20
          example: 21-0789-B
          description: The customer number used by the reseller to uniquely identify this customer
        emailAddress:
          type: string
          description: The companies main e-mail address
          format: email
          example: office@hgmfacility.com
          maxLength: 256
        phoneNumber:
          type: string
          description: The companies main phone number
          example: +44 256 51512
          maxLength: 256
        vatIdentificationNumber:
          type: string
          description: The VAT identification number of the customer
          example: +44 256 51512
          maxLength: 256
        preferredCulture:
          type: string
          description: The culture the company usually thinks in. Given as IETF BCP 47 language tag. If not given the system will use a default invariant culture.
          example: en-GB
          maxLength: 35
        status:
          type: string
          enum:
            - active
            - inactive
            - deleted
          description: The status of the user in terms of his possibilty to interact with the system
          default: active
          readOnly: true
        isReseller:
          type: boolean
          description: Defines if a customer is a reseller. Customers marked as resellers can use HsM's reseller features.
        lastUpdatedAt:
          type: string
          description: Describes when the user was last modified within HsM.
          format: date-time
          example: '2021-08-23T16:15:18.123+01:00'
          readOnly: true
        resellerId:
          type: string
          format: uuid
          description: Specifies the mandatory reseller for this customer
          writeOnly: true
        externallyManaged:
          type: boolean
          description: Defines if this is a externally managed customer. I.e. the customer details are managed by another system and synchronized to HsM and should therefore not be modified in HsM.
          readOnly: true
        AllowRoleInheritanceFromReseller:
          type: boolean
          description: Defines if roles applicable to the customer's reseller and marked for propagation down the reseller relation tree shall be actually inherited by this customer.
        AllowRoleInheritanceFromParentCustomer:
          type: boolean
          description: Defines if roles applicable to the customer's parent customer and marked for propagation down the customer hierarchy relation tree shall be actually inherited by this customer.
        AllowRoleInheritanceFromInvoiceRecipient:
          type: boolean
          description: Defines if roles applicable to the customer's invoice recipient and marked for propagation down the invoice relation tree shall be actually inherited by this customer.
        AllowRoleInheritanceFromConditionOwneron:
          type: boolean
          description: Defines if roles applicable to the customer's condition owner and marked for propagation down the condition relation tree shall be actually inherited by this customer.
        createdAt:
          type: string
          format: date-time
          description: Date time offset when this customer record was created
          readOnly: true
        synchronizationId:
          type: string
          format: uuid
          description: ID of the customer in an external system it is synchronized with.
        synchronizationInformation:
          type: string
          description: A JSON document that stores additional information for a synchronization process.
      required:
        - id
        - name1
        - countryCode
        - emailAddress
        - resellerId
        - externallyManaged
    customerBranding:
      description: Describes the branding options set for a customer
      type: object
      x-examples:
        example-1:
          productName: senseManagement
          displayModeDark:
            companyLogo: 'https://hagleitner.com/logos/hagleitnerLogo.dark.svg'
            navigationBarCompanyLogo: 'https://hagleitner.com/logos/hagleitnerLogo.dark.navigationbar.svg'
            mainColor300:
              hexCode: '#123456'
            mainColor500:
              hexCode: '#123456'
            mainColor700:
              hexCode: '#123456'
            navigationBarColor:
              hexCode: '#123456'
            navigationBarContrastColor:
              hexCode: '#123456'
            selectionColor:
              hexCode: '#123456'
          displayModeLight:
            companyLogo: 'https://hagleitner.com/logos/hagleitnerLogo.light.svg'
            navigationBarCompanyLogo: 'https://hagleitner.com/logos/hagleitnerLogo.light.navigationbar.svg'
            mainColor300:
              hexCode: '#123456'
            mainColor500:
              hexCode: '#123456'
            mainColor700:
              hexCode: '#123456'
            navigationBarColor:
              hexCode: '#123456'
            navigationBarContrastColor:
              hexCode: '#123456'
            selectionColor:
              hexCode: '#123456'
          instanceOperator: Hagleitner
          clientSpecificOptions:
            webPortal:
              favIcon: 'https://hagleitner.com/logos/hsm-favicon.svg'
      title: customerBranding
      properties:
        displayModeDark:
          type: object
          required:
            - companyLogo
            - navigationBarCompanyLogo
            - mainColor300
            - mainColor500
            - mainColor700
            - navigationBarColor
            - navigationBarContrastColor
            - selectionColor
          properties:
            companyLogo:
              type: string
              minLength: 1
            navigationBarCompanyLogo:
              type: string
              minLength: 1
            mainColor300:
              type: object
              required:
                - hexCode
              properties:
                hexCode:
                  type: string
                  minLength: 1
            mainColor500:
              type: object
              required:
                - hexCode
              properties:
                hexCode:
                  type: string
                  minLength: 1
            mainColor700:
              type: object
              required:
                - hexCode
              properties:
                hexCode:
                  type: string
                  minLength: 1
            navigationBarColor:
              type: object
              required:
                - hexCode
              properties:
                hexCode:
                  type: string
                  minLength: 1
            navigationBarContrastColor:
              type: object
              required:
                - hexCode
              properties:
                hexCode:
                  type: string
                  minLength: 1
            selectionColor:
              type: object
              required:
                - hexCode
              properties:
                hexCode:
                  type: string
                  minLength: 1
        displayModeLight:
          type: object
          required:
            - companyLogo
            - navigationBarCompanyLogo
            - mainColor300
            - mainColor500
            - mainColor700
            - navigationBarColor
            - navigationBarContrastColor
            - selectionColor
          properties:
            companyLogo:
              type: string
              minLength: 1
            navigationBarCompanyLogo:
              type: string
              minLength: 1
            mainColor300:
              type: object
              required:
                - hexCode
              properties:
                hexCode:
                  type: string
                  minLength: 1
            mainColor500:
              type: object
              required:
                - hexCode
              properties:
                hexCode:
                  type: string
                  minLength: 1
            mainColor700:
              type: object
              required:
                - hexCode
              properties:
                hexCode:
                  type: string
                  minLength: 1
            navigationBarColor:
              type: object
              required:
                - hexCode
              properties:
                hexCode:
                  type: string
                  minLength: 1
            navigationBarContrastColor:
              type: object
              required:
                - hexCode
              properties:
                hexCode:
                  type: string
                  minLength: 1
            selectionColor:
              type: object
              required:
                - hexCode
              properties:
                hexCode:
                  type: string
                  minLength: 1
      required:
        - displayModeDark
        - displayModeLight
    customerRelation:
      type: object
      title: resellerRelation-up
      description: Represents a customer relation. The meaning of the customerId depends on the use case.
      properties:
        Id:
          type: string
          format: uuid
          readOnly: true
        customerId:
          type: string
          description: Represents the id of the customer this customer relates to.
        lastUpdatedAt:
          type: string
          readOnly: true
        externallyManaged:
          type: boolean
          description: ''
      required:
        - Id
        - customerId
    customerRelation-synchronization:
      type: object
      title: resellerRelation-synchronization
      description: 'Represents a customer relation between two customers in HsM, including synchronization data.'
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        customerId:
          type: string
          format: uuid
        lastUpdatedAt:
          type: string
          format: date-time
          readOnly: true
        externallyManaged:
          type: boolean
          default: false
          description: 'If true this resource is exernally managed, the possibilities to modify the resource in HsM is then limited.'
        synchronizationId:
          type: string
          format: uuid
        synchronizationInformation:
          type: string
        createdAt:
          type: string
          format: date-time
          readOnly: true
      required:
        - id
        - customerId
        - externallyManaged
    customerHierarchyRelation:
      type: object
      title: resellerRelation
      description: Represents a reseller relation between two customers in HsM.
      properties:
        Id:
          type: string
          format: uuid
          readOnly: true
        parentCustomerId:
          type: string
        lastUpdatedAt:
          type: string
          readOnly: true
        externallyManaged:
          type: boolean
          description: ''
      required:
        - Id
        - parentCustomerId
    location:
      title: ''
      type: object
      description: 'Represents a location (building, building-area, floor, floor-area, room). '
      examples:
        - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
          type: floor
          name: Floor 013
          description: The administration floor
          parentLocationId: 7c3a5b0e-d172-4ccd-83a4-1483006217d2
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        type:
          type: string
          enum:
            - building
            - buildingArea
            - floor
            - floorArea
            - room
          readOnly: true
        code:
          type: string
          maxLength: 20
          description: A code uniquely identifying the location within a customer.
        name:
          type: string
          maxLength: 30
          minLength: 1
        description:
          type: string
        parentLocationId:
          type: string
          format: uuid
        sequenceNumber:
          type: integer
          default: 0
      required:
        - id
        - type
        - name
        - parentLocationId
        - sequenceNumber
    location.PATCH:
      title: ''
      type: object
      description: 'Represents a location (building, building-area, floor, floor-area, room). '
      examples:
        - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
          type: floor
          name: Floor 013
          description: The administration floor
          parentLocationId: 7c3a5b0e-d172-4ccd-83a4-1483006217d2
      properties:
        code:
          type: string
          maxLength: 20
          description: A code uniquely identifying the location within a customer.
        name:
          type: string
          maxLength: 30
          minLength: 1
        description:
          type: string
        parentLocationId:
          type: string
          format: uuid
        sequenceNumber:
          type: integer
          default: 0
    location-room:
      title: ''
      type: object
      description: 'Represents a location (building, building-area, floor, floor-area, room). '
      examples:
        - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
          type: floor
          name: Floor 013
          description: The administration floor
          parentLocationId: 7c3a5b0e-d172-4ccd-83a4-1483006217d2
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        code:
          type: string
          maxLength: 20
          description: A code uniquely identifying the location within a customer.
        name:
          type: string
          maxLength: 30
          minLength: 1
        description:
          type: string
        parentLocationId:
          type: string
          format: uuid
        sequenceNumber:
          type: integer
          default: 0
      required:
        - id
        - name
        - parentLocationId
        - sequenceNumber
    location-room.PATCH:
      title: ''
      type: object
      description: 'Represents a location (building, building-area, floor, floor-area, room). '
      examples:
        - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
          type: floor
          name: Floor 013
          description: The administration floor
          parentLocationId: 7c3a5b0e-d172-4ccd-83a4-1483006217d2
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        code:
          type: string
          maxLength: 20
          description: A code uniquely identifying the location within a customer.
        name:
          type: string
          maxLength: 30
          minLength: 1
        description:
          type: string
        parentLocationId:
          type: string
          format: uuid
        sequenceNumber:
          type: integer
          default: 0
    location-building:
      title: ''
      type: object
      description: A model for a building location.
      examples:
        - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
          type: floor
          name: Floor 013
          description: The administration floor
          parentLocationId: 7c3a5b0e-d172-4ccd-83a4-1483006217d2
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        code:
          type: string
          maxLength: 20
          description: A code uniquely identifying the location within a customer.
        name:
          type: string
          maxLength: 30
          minLength: 1
        description:
          type: string
        sequenceNumber:
          type: integer
          default: 0
        customerId:
          type: string
          format: uuid
          description: The customer the building belongs to.
          writeOnly: true
      required:
        - id
        - name
        - sequenceNumber
        - customerId
    location-building.PATCH:
      title: ''
      type: object
      description: A model used to patch building locations.
      examples:
        - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
          type: floor
          name: Floor 013
          description: The administration floor
          parentLocationId: 7c3a5b0e-d172-4ccd-83a4-1483006217d2
      properties:
        code:
          type: string
          maxLength: 20
          description: A code uniquely identifying the location within a customer.
        name:
          type: string
          maxLength: 30
          minLength: 1
        description:
          type: string
        sequenceNumber:
          type: integer
          default: 0
    location-building-area:
      title: ''
      type: object
      description: A model for a building area location.
      examples:
        - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
          type: floor
          name: Floor 013
          description: The administration floor
          parentLocationId: 7c3a5b0e-d172-4ccd-83a4-1483006217d2
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        code:
          type: string
          maxLength: 20
          description: A code uniquely identifying the location within a customer.
        name:
          type: string
          maxLength: 30
          minLength: 1
        description:
          type: string
        parentLocationId:
          type: string
          format: uuid
        sequenceNumber:
          type:
            - string
            - integer
          default: 0
      required:
        - id
        - name
        - parentLocationId
        - sequenceNumber
    location-building-area.PATCH:
      title: ''
      type: object
      description: A model used to patch building area locations.
      examples:
        - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
          type: floor
          name: Floor 013
          description: The administration floor
          parentLocationId: 7c3a5b0e-d172-4ccd-83a4-1483006217d2
      properties:
        code:
          type: string
          maxLength: 20
          description: A code uniquely identifying the location within a customer.
        name:
          type: string
          maxLength: 30
          minLength: 1
        description:
          type: string
        parentLocationId:
          type: string
          format: uuid
        sequenceNumber:
          type:
            - string
            - integer
          default: 0
    location-floor:
      title: ''
      type: object
      description: A model for a floor location.
      examples:
        - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
          type: floor
          name: Floor 013
          description: The administration floor
          parentLocationId: 7c3a5b0e-d172-4ccd-83a4-1483006217d2
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        code:
          type: string
          maxLength: 20
          description: A code uniquely identifying the location within a customer.
        name:
          type: string
          maxLength: 30
          minLength: 1
        description:
          type: string
        parentLocationId:
          type: string
          format: uuid
        sequenceNumber:
          type:
            - string
            - integer
          default: 0
      required:
        - id
        - name
        - parentLocationId
        - sequenceNumber
    location-floor.PATCH:
      title: ''
      type: object
      description: A model used to patch floor locations.
      examples:
        - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
          type: floor
          name: Floor 013
          description: The administration floor
          parentLocationId: 7c3a5b0e-d172-4ccd-83a4-1483006217d2
      properties:
        code:
          type: string
          maxLength: 20
          description: A code uniquely identifying the location within a customer.
        name:
          type: string
          maxLength: 30
          minLength: 1
        description:
          type: string
        parentLocationId:
          type: string
          format: uuid
        sequenceNumber:
          type:
            - string
            - integer
          default: 0
    location-floor-area:
      title: ''
      type: object
      description: A model for a floor area location.
      examples:
        - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
          type: floor
          name: Floor 013
          description: The administration floor
          parentLocationId: 7c3a5b0e-d172-4ccd-83a4-1483006217d2
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        code:
          type: string
          maxLength: 20
          description: A code uniquely identifying the location within a customer.
        name:
          type: string
          maxLength: 30
          minLength: 1
        description:
          type: string
        parentLocationId:
          type: string
          format: uuid
        sequenceNumber:
          type:
            - string
            - integer
          default: 0
      required:
        - id
        - name
        - parentLocationId
        - sequenceNumber
    location-floor-area.PATCH:
      title: ''
      type: object
      description: A model used to patch floor area locations.
      examples:
        - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
          type: floor
          name: Floor 013
          description: The administration floor
          parentLocationId: 7c3a5b0e-d172-4ccd-83a4-1483006217d2
      properties:
        code:
          type: string
          maxLength: 20
          description: A code uniquely identifying the location within a customer.
        name:
          type: string
          maxLength: 30
          minLength: 1
        description:
          type: string
        parentLocationId:
          type: string
          format: uuid
        sequenceNumber:
          type:
            - string
            - integer
          default: 0
    location-tree:
      title: ''
      type: array
      description: 'Represents a location (building, building-area, floor, floor-area, room). '
      examples:
        - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
          type: floor
          name: Floor 013
          description: The administration floor
          parentLocationId: 7c3a5b0e-d172-4ccd-83a4-1483006217d2
      items:
        $ref: '#/components/schemas/location-tree-element'
    location-tree-element:
      title: ''
      type: object
      description: 'Represents a location (building, building-area, floor, floor-area, room). '
      examples:
        - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
          type: floor
          name: Floor 013
          description: The administration floor
          parentLocationId: 7c3a5b0e-d172-4ccd-83a4-1483006217d2
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        type:
          type: string
          enum:
            - building
            - buildingArea
            - floor
            - floorArea
            - room
          readOnly: true
        name:
          type: string
          maxLength: 30
          minLength: 1
        description:
          type: string
        sequenceNumber:
          type:
            - string
            - integer
          default: 0
        children:
          type: array
          items:
            $ref: '#/components/schemas/location-tree-element'
      required:
        - id
        - type
        - name
        - sequenceNumber
    location.:
      title: location.
      type: object
      description: 'Represents a location (building, building-area, floor, floor-area, room). '
      examples:
        - name: Floor 002
          description: A new description
          parentLocationId: 7c3a5b0e-d172-4ccd-83a4-1483006217d2
          sequenceNumber: 0
      properties:
        name:
          type: string
          maxLength: 30
          minLength: 1
        description:
          type: string
        parentLocationId:
          type: string
          format: uuid
        sequenceNumber:
          type:
            - string
            - integer
          default: 0
    user:
      type: object
      title: user
      description: Represents a user of the HsM system. Users in HsM will be linked to Azure B2C accounts by the unique e-mail address once a user first accesses HsM via B2C authentication.
      properties:
        id:
          type: string
          format: uuid
          description: Id of the user within the HsM system.
          readOnly: true
        firstName:
          type: string
          example: John
          maxLength: 50
        lastName:
          type: string
          example: Doe
          maxLength: 50
        emailAddress:
          type: string
          description: The users e-mail address. This address must be unique within all non deleted users in the HsM system.
          format: email
          example: john@doe.com
          maxLength: 256
        preferredCulture:
          type: string
          description: |-
            The culture the user wants to use in interaction with the system. Given as IETF BCP 47 language tag. If not given the system will use a default invariatn culture. 

            This cutlure is a default for this user, client systems might however choose to use another culture for interaction with the HsM system.
          example: de-AT
          maxLength: 35
        mobilePhoneNumber:
          type: string
          description: 'Mobile phone number. This number will be used when the system wants to interact with that user via SMS, mobile phone numbers are not exposed to other users.'
          example: +43 664 9161413
        gender:
          type: string
          enum:
            - female
            - male
            - non-binary
          description: ''
        lastUpdatedAt:
          type: string
          description: 'Describes when the user was last modified within HsM. '
          format: date-time
          example: '2021-08-23T16:15:18.123+01:00'
          readOnly: true
        status:
          type: string
          enum:
            - active
            - inactive
            - deleted
          description: The status of the user in terms of his possibilty to interact with the system.
          readOnly: true
      required:
        - emailAddress
    user-synchronization:
      type: object
      title: synchronizationUser
      description: 'Represents a user of the HsM system including synchronization data. '
      properties:
        id:
          type: string
          format: uuid
          description: Id of the user within the HsM system.
          readOnly: true
        firstName:
          type: string
          example: John
          maxLength: 50
        lastName:
          type: string
          example: Doe
          maxLength: 50
        emailAddress:
          type: string
          description: The users e-mail address. This address must be unique within all non deleted users in the HsM system.
          format: email
          example: john@doe.com
          maxLength: 256
        preferredCulture:
          type: string
          description: |-
            The culture the user wants to use in interaction with the system. Given as IETF BCP 47 language tag. If not given the system will use a default invariatn culture. 

            This cutlure is a default for this user, client systems might however choose to use another culture for interaction with the HsM system.
          example: de-AT
          maxLength: 35
        mobilePhoneNumber:
          type: string
          description: 'Mobile phone number. This number will be used when the system wants to interact with that user via SMS, mobile phone numbers are not exposed to other users.'
          example: +43 664 9161413
        gender:
          type: string
          enum:
            - female
            - male
            - non-binary
          description: ''
        status:
          type: string
          enum:
            - active
            - inactive
            - deleted
          description: The status of the user in terms of his possibilty to interact with the system.
          readOnly: true
        createdAt:
          type: string
          format: date-time
          example: '2021-08-23T16:15:18.123+01:00'
          readOnly: true
        latestUpdatedAt:
          type: string
          description: 'Describes when the user was last modified within HsM. '
          format: date-time
          example: '2021-08-23T16:15:18.123+01:00'
          readOnly: true
        synchronizationId:
          type: string
          format: uuid
          description: Id of the user in an external system.
        synchronizationInformation:
          type: string
          description: A JSON document that can be used by synchronization processes to store synchronization information with this user. The schema of the JSON document is defined by the external synchronization process.
        externallyManaged:
          type: boolean
          default: false
          description: 'If true this resource is exernally managed, the possibilities to modify the resource in HsM is then limited.'
      required:
        - id
        - emailAddress
        - preferredCulture
        - createdAt
        - latestUpdatedAt
        - externallyManaged
    selfRegistrationCredential:
      title: selfRegistrationCredential
      type: object
      properties:
        Id:
          type: string
          format: uuid
          description: Id of this self-registration credential
          readOnly: true
        customerNumber:
          type: string
          description: Customer number of this credential
          readOnly: true
        pin:
          type: string
          description: PIN of this credential
          minLength: 9
          maxLength: 9
          readOnly: true
        validTill:
          type: string
          description: Date until this credential is valid.
          format: date-time
          readOnly: true
        shareUri:
          type: string
          format: uri
          description: A URI that can be used to assign oneself to the customer.
      required:
        - Id
        - customerNumber
        - pin
        - validTill
        - shareUri
    response-400-badRequest:
      title: response-400-badRequest
      type: object
      description: A model for returning details for 401 responses
      examples:
        - type: Insufficient-Privileges
          title: The accessing user does not have the provileges to access this resource
          detail: The user accessing the resource does is not granted the privilege to access the resource.
          missingPermission: ShareSelfRegistrationCredentials
      properties:
        type:
          type: string
        title:
          type: string
        detail:
          type: string
    response-401-unauthorized:
      title: response-401-unauthorized
      type: object
      properties:
        type:
          type: string
        title:
          type: string
        detail:
          type: string
        missingPermission:
          type: string
      description: A model for returning details for 401 responses
      examples:
        - type: Insufficient-Privileges
          title: The accessing user does not have the provileges to access this resource
          detail: The user accessing the resource does is not granted the privilege to access the resource.
          missingPermission: ShareSelfRegistrationCredentials
    response-403-forbidden:
      title: response-403-forbidden
      type: object
      properties:
        type:
          type: string
        title:
          type: string
        detail:
          type: string
        missingPermission:
          type: string
      description: A model for returning details for 403 responses
      examples:
        - type: Insufficient-Privileges
          title: The accessing user does not have the provileges to access this resource
          detail: The user accessing the resource does is not granted the privilege to access the resource.
          missingPermission: ShareSelfRegistrationCredentials
    roleAssignment-customer:
      title: roleAssignment-customer
      type: object
      examples:
        - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
          userId: 2c4a230c-5085-4924-a3e1-25fb4fc5965b
          assignedAt: '2019-08-24T14:15:22Z'
          roleId: 7382d58e-652a-4905-b7c9-bcca1e0e5391
          userDisplayName: 'Doe, John'
          roleName: Customer Administrator
      properties:
        id:
          type: string
          description: Id of the role assignment
          format: uuid
          readOnly: true
        userId:
          type: string
          format: uuid
          description: Id of user who is assigned a role
        assignedAt:
          type: string
          description: Date when the role was assigned
          format: date-time
          readOnly: true
        roleId:
          type: string
          description: Id of the assigned role.
          format: uuid
        userDisplayName:
          type: string
          description: Display name of the user.
          readOnly: true
        roleName:
          type: string
          description: Name of the assigned role
          readOnly: true
      required:
        - id
        - userId
        - assignedAt
        - roleId
        - userDisplayName
        - roleName
      description: Represents a role assignment from a customers perspective.
    roleAssignment-user:
      title: roleAssignment-user
      type: object
      examples:
        - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
          userId: 2c4a230c-5085-4924-a3e1-25fb4fc5965b
          assignedAt: '2019-08-24T14:15:22Z'
          roleId: 7382d58e-652a-4905-b7c9-bcca1e0e5391
          userDisplayName: 'Doe, John'
          roleName: Customer Administrator
      properties:
        id:
          type: string
          description: Id of the role assignment
          format: uuid
          readOnly: true
        customerId:
          type: string
          format: uuid
          description: Id of user who is assigned a role
        assignedAt:
          type: string
          description: Date when the role was assigned
          format: date-time
          readOnly: true
        roleId:
          type: string
          description: Id of the assigned role.
          format: uuid
        customerDisplayName:
          type: string
          description: Display name of the user.
          readOnly: true
        roleName:
          type: string
          description: Name of the assigned role
          readOnly: true
      required:
        - id
        - customerId
        - assignedAt
        - roleId
        - customerDisplayName
        - roleName
      description: Represents a role assignment from a users perspective.
  parameters:
    limit:
      name: limit
      in: query
      required: false
      schema:
        type: integer
        format: int32
        example: 100
        default: 100
        minimum: 10
      description: 'Pagination, page size limit.'
    offset:
      name: offset
      in: query
      required: false
      schema:
        type: integer
        format: int32
        minimum: 0
        example: 200
      description: 'Pagination, offset for returned page.'
    X-Total-Count:
      name: X-Total-Count
      in: header
      required: false
      schema:
        type: integer
        format: int32
      description: Total number of elements in the collection.
    Accept-Language:
      name: Accept-Language
      in: header
      required: false
      schema:
        type: string
      description: Defines which culture are accepted by the client.
  responses: {}
  examples: {}
