openapi: 3.1.0
info:
  title: BusinessDataSynchronization-API
  version: '1.0'
servers:
  - url: 'http://localhost:3000'
paths:
  /customers:
    get:
      summary: Your GET endpoint
      tags: []
      responses: {}
      operationId: get-customers
      description: Gets all customers
      parameters:
        - schema:
            type: integer
          in: query
          name: limit
          description: 'Pagination, page size limit'
          required: true
        - schema:
            type: integer
          in: query
          name: offset
          description: 'Pagination, page offset'
          required: true
        - schema:
            type: string
            format: date-time
          in: query
          name: latestUpdateAfter
          description: Filters for customers that were created after a given date
        - schema:
            type: boolean
          in: query
          name: noSyncId
          description: Filters for customers that do not have a synchronization Id
        - schema:
            type: string
          in: query
          name: syncId
          description: Filters for customers with the given synchronization Id
  '/customers/{id}/reseller-relations':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses: {}
      operationId: get-customers-id-reseller-relations
  '/customers/{id}/reseller-relations/{relation-id}/':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
      - schema:
          type: string
        name: relation-id
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses: {}
      operationId: get-customers-id-reseller-relations
      description: ''
    delete:
      summary: ''
      operationId: delete-customers-id-reseller-relations-relation-id
      responses:
        '200':
          description: OK
      description: Deletes this relation
  '/customers/{id}/reseller-relations/{relation-id}/customer-roles/':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
      - schema:
          type: string
        name: relation-id
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses: {}
      operationId: get-customers-id-reseller-relations
      description: 'Gets all customer roles assigned to this relation, i.e. if a customer role is assigned to a cutomer relation that role is assigned to the customer that is child of the releati automatically.'
    delete:
      summary: ''
      operationId: delete-customers-id-reseller-relations-relation-id
      responses:
        '200':
          description: OK
      description: Deletes this relation
  '/customers/{id}/assigned-customer-roles':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses: {}
      operationId: get-customers-id-roles
      description: Gets assigned roles to this customer
      parameters:
        - schema:
            type: string
            format: uuid
          in: query
          name: userId
          description: If given filters the list for roles assigned to that specific user
        - schema:
            type: integer
            minimum: 1
            default: 100
            maximum: 1000
          in: query
          name: limit
          description: 'Pagination, maximum page size'
        - schema:
            type: integer
            minimum: 0
          in: query
          name: offset
          description: 'Pagination, page offset'
        - schema:
            type: string
          in: query
          name: assignedAfter
          description: Filters for roles assigned after the given date
    post:
      summary: ''
      operationId: post-customers-id-roles
      responses:
        '200':
          description: OK
      description: Assignes a new role for a suser on this customer
  '/customers/{id}/efective-customer-roles':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses: {}
      operationId: get-customers-id-roles
      description: Gets assigned roles to this customer
      parameters:
        - schema:
            type: string
            format: uuid
          in: query
          name: userId
          description: If given filters the list for roles assigned to that specific user
        - schema:
            type: integer
            minimum: 1
            default: 100
            maximum: 1000
          in: query
          name: limit
          description: 'Pagination, maximum page size'
        - schema:
            type: integer
            minimum: 0
          in: query
          name: offset
          description: 'Pagination, page offset'
        - schema:
            type: string
          in: query
          name: assignedAfter
          description: Filters for roles assigned after the given date
    post:
      summary: ''
      operationId: post-customers-id-roles
      responses:
        '200':
          description: OK
      description: Assignes a new role for a suser on this customer
  /system/roles:
    get:
      summary: Your GET endpoint
      tags: []
      responses: {}
      operationId: get-systemroles
      description: Gets a list of roles defined for the system.
      parameters:
        - schema:
            type: string
          in: query
          name: limit
        - schema:
            type: string
          in: query
          name: offset
        - schema:
            type: string
          in: query
          name: user
    parameters: []
  /users:
    parameters: []
    get:
      summary: ''
      operationId: get-users
      responses:
        '200':
          description: OK
      description: Get all users
      parameters:
        - schema:
            type: integer
          in: query
          name: limit
          description: 'Pagination, page size limit'
          required: true
        - schema:
            type: integer
          in: query
          name: offset
          description: 'Pagination, start offset'
          required: true
        - schema:
            type: string
            format: date-time
          in: query
          name: latestUpdateAfter
          description: Filters for customers that were last updated after a specific date
        - schema:
            type: string
          in: query
          name: noCrmId
          description: Filters for customers that have no CrmId
    post:
      summary: ''
      operationId: post-users
      responses:
        '200':
          description: OK
      description: Creates a new user
    put:
      summary: ''
      operationId: put-users
      responses:
        '200':
          description: OK
      description: Modifies data of an existing user
    delete:
      summary: ''
      operationId: delete-users
      responses:
        '200':
          description: OK
      description: 'Deletes a user. Users can only be deleted if they have no associated data. '
  '/users/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: ''
      operationId: get-potential-users-Id
      responses:
        '200':
          description: OK
      description: Gets a specific user
  '/users/{id}/mask':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Id of the user
    put:
      summary: ''
      operationId: put-users-id-mask
      responses:
        '200':
          description: OK
  '/users/{id}/assigned-system-roles':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses: {}
      operationId: get-users-id-systemroles
      description: Gets a list of systemroles assigned to that user.
      parameters:
        - schema:
            type: integer
          in: query
          name: limit
          description: 'Pagination, page size limit'
        - schema:
            type: integer
          in: query
          name: offset
          description: 'Pagination, page offset'
    post:
      summary: ''
      operationId: post-users-id-systemroles
      responses:
        '200':
          description: OK
      description: Grant a system role to that user
  '/users/{id}/assigned-customer-roles':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses: {}
      operationId: get-users-id-customerroles
      description: Gets a list of effective roles the user has on the specified customer
      parameters:
        - schema:
            type: string
            format: uuid
          in: query
          name: customerId
components:
  schemas: {}
