openapi: 3.1.0
info:
  title: Standard API
  contact:
    name: Hagleitner Hygiene Internaltional GmbH
    url: 'http://www.hagleitner.com/'
    email: office@hagleitner.com
  version: 1.0.0-beta.7
  summary: The Standard API is a client agnostic API to the HsM Client Service
  description: |
    The Standard API is a client agnostic API to the HsM Client Service.

    ## Notes for developers

    ### i18N and Accept-Language header
    All operations will respect Accept-Language headers. If the operation has to handle localizable content it will do so respecting the Accept-Language header. This includes formatting of culture-specific data, sorting, language-specific content (phrases) etc.

    ### Responses
    This specification shows only the most relevant responses. Clients have to still handle all other possible HTTP Response codes.
servers:
  - url: 'http://clse.hsm-test.com/api/standard/v1'
tags:
  - name: Authorization
  - name: Customers
  - name: CustomerSelfAssignment
  - name: Locations
  - name: System
  - name: Users
  - name: CustomerSelection
paths:
  /capabilities:
    parameters: []
    get:
      summary: /capabilities GET
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customerRoleAssignment-customer'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-401-unauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      operationId: /capabilities#get
      description: Gets all capabilities defined in HsM
      parameters:
        - $ref: '#/components/parameters/pageNumber'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/onlyBestMatchingTranslation'
        - schema:
            type: string
          in: query
          name: capabilityTypes
          description: 'Filters for types of capabilities, comma separated list.'
      x-internal: false
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                Id:
                  type: integer
                Code:
                  type: string
                Name:
                  $ref: '#/components/schemas/phrase'
                minimumUserCapabilityLevel:
                  type: integer
                  format: int32
                  minimum: 1
                  maximum: 10
                minimumCustomerCapabilityLavel:
                  type: integer
                  minimum: 1
                  maximum: 10
                  format: int32
          application/xml:
            schema:
              type: object
              properties: {}
      tags:
        - System
  '/customer-role-assignments/{id}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: ID of the customer
    get:
      summary: '/customer-role-assignments/{id} GET'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customerRoleAssignment-customer'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-401-unauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      operationId: /customer-role-assignments-id-get
      description: Gets a specific customer role-assignemnt.
      parameters:
        - schema:
            type: string
            format: uuid
          in: query
          name: Id
          description: ID of the role assignment
      x-internal: false
      tags:
        - Authorization
    delete:
      summary: '/customer-role-assignments/{id} DELETE'
      operationId: /customer-role-assignments-id-delete
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      description: Deletes a customer role-assignment.
      parameters:
        - schema:
            type: string
            format: uuid
          in: query
          name: Id
          description: ID of the role assignment.
      tags:
        - Authorization
  '/customer-self-assignment-credentials/{id}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: ID of the customer
    get:
      summary: '/customer-self-assignment-credentials/{id} GET'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customerSelfAssignmentCredentials'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      operationId: self-assignment-credential#get
      x-internal: false
      description: Gets the self assignment credentials for a customer by id.
      tags:
        - CustomerSelfAssignment
    delete:
      summary: '/customer-self-assignment-credentials/{id} DELETE'
      operationId: self-assignment-credential#delete
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      description: Deletes the customer-self-assignment credentials.
      tags:
        - CustomerSelfAssignment
  /customers:
    get:
      summary: /customers GET
      tags:
        - Customers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/customer-light'
                  totalPages:
                    $ref: '#/components/schemas/pagination-totalPages'
                  totalItems:
                    $ref: '#/components/schemas/pagination-totaItems'
                  pageSize:
                    $ref: '#/components/schemas/pagination-pageSize'
                  currentPage:
                    $ref: '#/components/schemas/pagination-currentPage'
                required:
                  - items
                  - totalPages
                  - totalItems
                  - pageSize
                  - currentPage
          headers:
            header-0:
              schema:
                type: string
              description: X
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
              examples: {}
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      operationId: customers-get
      description: Gets a collection of customers. Only customers that the current user has permissions on will be included in the result.The collection is ordered by name1 of the customer.
      parameters:
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/pageNumber'
        - schema:
            type: integer
            format: int32
          in: query
          name: fullTextSearch
          description: A search string that is used to filter for customers using the full text search capability of the system.
        - schema:
            type: string
            example: 'active,inactive'
            default: active
          in: query
          name: status
          description: 'Filters for customers that are in one of the given states. '
        - schema:
            type: integer
            format: int32
          in: query
          name: resellerId
          description: Filters for customers that are sub customers of the given reseller customer.
        - schema:
            type: string
          in: query
          name: parentId
          description: Filters for customers that are subsidiaries of the given parent customer.
        - schema:
            type: integer
            format: int32
          in: query
          name: invoiceRecipientId
          description: Filters for customers that are invoice sources of the given invoice recipient customer.
        - schema:
            type: integer
            format: int32
          in: query
          name: conditionOwnerId
          description: Filters for customers that are beneficiaries of the given condition owner customer.
      x-internal: false
    post:
      summary: /customers POST
      operationId: customers-post
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customer'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
      description: Creates a new customer.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customer'
      tags:
        - Customers
      parameters: []
  '/customers/{id}':
    get:
      summary: '/customers/{id} GET'
      tags:
        - Customers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/customer'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      operationId: customers-id-get
      description: 'Gets a single customer, defined by its customer id.'
      parameters: []
      x-internal: false
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: ID of the customer
    put:
      summary: '/customers/{id} PUT'
      operationId: customers-id-put
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-401-unauthorized'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: ''
      description: Updates a customer.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customer'
      tags:
        - Customers
      parameters: []
    patch:
      summary: '/customers/{id} PATCH'
      operationId: customers-id-patch
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      description: Performs a partial update on a customer.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customer.PATCH'
      tags:
        - Customers
  '/customers/{id}/beneficiaries':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: ID of the customer
    get:
      summary: '/customers/{id}/beneficiaries GET'
      tags:
        - Customers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/customer-light'
                  totalPages:
                    $ref: '#/components/schemas/pagination-totalPages'
                  totalItems:
                    $ref: '#/components/schemas/pagination-totaItems'
                  pageSize:
                    $ref: '#/components/schemas/pagination-pageSize'
                  currentPage:
                    $ref: '#/components/schemas/pagination-currentPage'
                required:
                  - items
                  - totalPages
                  - totalItems
                  - pageSize
                  - currentPage
      operationId: customer-beneficiaries#get
      x-internal: false
      description: Gets all the beneficiares of a customer (direct descendants in the condition-relationship-tree). Collection is sorted by name1.
      parameters:
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/pageNumber'
  '/customers/{id}/beneficiary-path':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: ID of the customer
    get:
      summary: '/customers/{id}/beneficiary-path GET'
      tags:
        - Customers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: ''
      operationId: customer-status-get
      x-internal: false
      description: Gets the status of teh customer.
  '/customers/{id}/branding':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: ID of the customer
    get:
      summary: '/customers/{id}/branding GET'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customerBranding'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
          headers: {}
      operationId: customer-branding#get
      description: Gets the branding assigned to this specific customer.
      x-internal: false
      tags:
        - Customers
    put:
      summary: '/customers/{id}/branding PUT'
      operationId: customer-branding#put
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      description: Creates or updates the customer branding.
      tags:
        - Customers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customerBranding'
    delete:
      summary: '/customers/{id}/branding DELETE'
      operationId: customer-branding#delete
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      description: Deletes a customer branding.
      tags:
        - Customers
  '/customers/{id}/buildings':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    post:
      summary: '/customers/{id}/buildings POST'
      operationId: customer-buildings#post
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/location-building'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/location-building'
      description: Creates a new building for this customer.
      tags:
        - Locations
    get:
      summary: '/customers/{id}/buildings GET'
      operationId: get-customers-id-buildings
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/location-building'
                  totalPages:
                    $ref: '#/components/schemas/pagination-totalPages'
                  totalItems:
                    $ref: '#/components/schemas/pagination-totaItems'
                  pageSize:
                    $ref: '#/components/schemas/pagination-pageSize'
                  currentPage:
                    $ref: '#/components/schemas/pagination-currentPage'
                required:
                  - items
                  - totalPages
                  - totalItems
                  - pageSize
                  - currentPage
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      description: Gets all buildings of a csutomer.
      tags:
        - Customers
      parameters:
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/pageNumber'
  '/customers/{id}/customer-hierarchy-relation':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: ID of the customer
    get:
      summary: '/customers/{id}/customer-hierarchy-relation GET'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customerRelation'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      operationId: customer-customer-hierarchy-relation#get
      x-internal: false
      description: Gets the customer hierarchy relation of this customer. I.e. the relation to its parent customer.
      tags:
        - Customers
    post:
      summary: '/customers/{id}/customer-hierarchy-relation POST'
      operationId: customers-customer-hierarchy-relations#post
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customerRelation'
      description: Creates a customer-hierarchy from this customer to a reseller (replacing the existing relation).
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customerRelation'
      tags:
        - Customers
  '/customers/{id}/condition-relation':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: ID of the customer
    get:
      summary: '/customers/{id}/condition-relation GET'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customerRelation'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      operationId: customer-condition-relation#get
      x-internal: false
      description: Gets the condition owner relation of this customer. I.e. the relation to another customer whose conditions apply to this customer.
      tags:
        - Customers
    post:
      summary: '/customers/{id}/condition-relation POST'
      operationId: customers-condition-relations#post
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customerRelation'
      description: Creates a relation from this customer to a condition provider (replacing the existing relation).
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customerRelation'
      tags:
        - Customers
    delete:
      summary: '/customers/{id}/condition-relation DELETE'
      operationId: customers-condition-relations#delete
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      description: Deletes the condition relation for this customer.
      tags:
        - Customers
  '/customers/{id}/effective-branding':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: ID of the customer
    get:
      summary: '/customers/{id}/effective-branding GET'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/branding'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      operationId: customer-effective-branding#get
      description: Gets the effecive branding of this customer.
      x-internal: false
      tags:
        - Customers
  '/customers/{id}/effective-location-name-suggestions':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: ID of the customer
    get:
      summary: '/customers/{id}/effective-location-name-suggestions GET'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  Id:
                    type: integer
                    format: json-pointer
                    description: ID of the suggestion.
                  Name:
                    type: string
                    description: Name of the suggestion (best matching translation)
                  SequenceNumber:
                    type: number
                    description: 'The sequence number used when sorting suggestions, and also the sequence numbers that clients shall apply when this suggestion is used for a location.'
                required:
                  - Id
                  - Name
                  - SequenceNumber
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      operationId: customer-effective-location-name-suggestions#get
      description: |-
        Gets the location name suggestions for a specific location type that are effective for this customer. I.e. either the suggestions that were created for this customer or - if non are defined for this customer - the suggestions of the closest reseller customer that has suggestions.

        The response will be ordered by the suggestions' sequence number ascending.
      parameters:
        - schema:
            type: string
            enum:
              - Building
              - BuildingPart
              - Floor
              - FloorArea
              - Room
          in: query
          name: locationType
          description: 'The location type '
          required: true
        - $ref: '#/components/parameters/Accept-Language'
      x-internal: false
      tags:
        - Customers
  '/customers/{id}/effective-role-assignments':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: ID of the customer
    get:
      summary: '/customers/{id}/effective-role-assignments GET'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/customerRoleAssignment-customer'
                  totalPages:
                    $ref: '#/components/schemas/pagination-totalPages'
                  totalItems:
                    $ref: '#/components/schemas/pagination-totaItems'
                  pageSize:
                    $ref: '#/components/schemas/pagination-pageSize'
                  currentPage:
                    $ref: '#/components/schemas/pagination-currentPage'
                required:
                  - items
                  - totalPages
                  - totalItems
                  - pageSize
                  - currentPage
      operationId: customer-effective-roles#get
      description: Gets effective roles applied to this customer.
      parameters:
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/pageNumber'
        - schema:
            type: string
            format: uuid
          in: query
          name: userId
          description: Filters the effective roles to those given to the provided user id.
        - $ref: '#/components/parameters/onlyBestMatchingTranslation'
      x-internal: false
      tags:
        - Authorization
  '/customers/{id}/effective-customer-permissions ':
    parameters:
      - schema:
          type: integer
          format: uuid
        name: id
        in: path
        required: true
        description: ID of the customer
    get:
      summary: '/customers/{id}/effective-customer-permissions GET'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    code:
                      type: string
                      description: Identifying code of the permission.
                  required:
                    - code
              examples: {}
      operationId: customer-effective-customer-permissions#get
      description: |-
        Gets the effectively granted permissions a user (the security principal) has on the this customer (the securable). The response contains a representation of permissions the user is effectively granted on this customer, including permissions that are inherited from other customers and from the system securable.

        As the number of customer permissions is naturally limited this endpoint does not use pagination.
      parameters:
        - schema:
            type: integer
          in: query
          name: userId
          description: ID of the user for whom the effective permissions shall be returned. If not given will default to the accessing user.
      x-internal: false
      tags:
        - Authorization
  '/customers/{id}/hierarchy-path-elements':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: ID of the customer
    get:
      summary: '/customers/{id}/hierarchy-path-elements GET'
      tags:
        - Customers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/customer-light'
                  totalPages:
                    $ref: '#/components/schemas/pagination-totalPages'
                  totalItems:
                    $ref: '#/components/schemas/pagination-totaItems'
                  pageSize:
                    $ref: '#/components/schemas/pagination-pageSize'
                  currentPage:
                    $ref: '#/components/schemas/pagination-currentPage'
                required:
                  - items
                  - totalPages
                  - totalItems
                  - pageSize
                  - currentPage
      operationId: customer-customer-hierarchy-path-elements#get
      x-internal: false
      description: Gets all the customers on the customer-hierarchy path from the root to this customer as sorted list.
      parameters: []
  '/customers/{id}/invoicing-path':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: ID of the customer
    get:
      summary: '/customers/{id}/invoice-recipient-path GET'
      tags:
        - Customers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/customer-light'
      operationId: customer-invoice-recipient-path#get
      x-internal: false
      description: Gets all the customers on the invoicing path from the root to this customer as sorted list.
  '/customers/{id}/invoicing-relation':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: ID of the customer
    get:
      summary: '/customers/{id}/invoice-relation GET'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customerRelation'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      operationId: customer-invoice-relation#get
      x-internal: false
      description: Gets the invoice relation of this customer. I.e. the relation to another customer who get the invoices for this customer.
      tags:
        - Customers
    post:
      summary: '/customers/{id}/invoice-relation POST'
      operationId: customers-invoice-relations#post
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customerRelation'
      description: Creates an invoice from this customer to a reseller (replacing the existing relation).
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customerRelation'
      tags:
        - Customers
    delete:
      summary: '/customers/{id}/invoice-relation DELETE'
      operationId: customers-invoice-relations#delete
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      description: Deletes the invoice relation for this customer.
      tags:
        - Customers
  '/customers/{id}/invoice-sources':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: ID of the customer
    get:
      summary: '/customers/{id}/invoice-sources GET'
      tags:
        - Customers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/customer-light'
                  totalPages:
                    $ref: '#/components/schemas/pagination-totalPages'
                  totalItems:
                    $ref: '#/components/schemas/pagination-totaItems'
                  pageSize:
                    $ref: '#/components/schemas/pagination-pageSize'
                  currentPage:
                    $ref: '#/components/schemas/pagination-currentPage'
                required:
                  - items
                  - totalPages
                  - totalItems
                  - pageSize
                  - currentPage
      operationId: customer-invoice-sources#get
      x-internal: false
      description: Gets all the invoice sources of a customer (direct descendants in the invoicing-relationship-tree). Collection is sorted by name1.
      parameters:
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/pageNumber'
  '/customers/{id}/location-tree':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: ID of the customer
    get:
      summary: '/customers/{id}/location-tree GET'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/location-tree'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      operationId: customer-location-tree#get
      description: Gets the whole location tree of a customer. Each level of the returned nested structure is ordered by sequence number and then name.
      x-internal: false
      tags:
        - Locations
  '/customers/{id}/locations':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: ID of the customer
    get:
      summary: '/customers/{id}/locations GET'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/location'
                  totalPages:
                    $ref: '#/components/schemas/pagination-totalPages'
                  totalItems:
                    $ref: '#/components/schemas/pagination-totaItems'
                  pageSize:
                    $ref: '#/components/schemas/pagination-pageSize'
                  currentPage:
                    $ref: '#/components/schemas/pagination-currentPage'
                required:
                  - items
                  - totalPages
                  - totalItems
                  - pageSize
                  - currentPage
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      operationId: customer-locations#get
      description: Generic endpoint to get a collection of locations based on filter criteria. Collection is ordred by the location name ascending.
      parameters:
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/pageNumber'
        - schema:
            type: string
            enum:
              - building
              - buildingArea
              - floor
              - floorArea
              - room
          in: query
          name: locationType
          description: Filters for locations of a specific type only
        - schema:
            type: string
            format: uuid
          in: query
          name: parentLocation
          description: Filters for locations that are direct children of this parent location.
        - schema:
            type: string
          in: query
          name: name
          description: Filters for location that match contains the given string in its name.
        - schema:
            type: string
          in: query
          name: code
          description: Filters for location that match contains the given string in its code.
      x-internal: false
      tags:
        - Locations
  '/customers/{id}/mark-favorite':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: ID of the customer
    post:
      summary: '/customers/{id}/mark-favorite POST'
      operationId: post-customers-id-mark-favorite
      responses:
        '200':
          description: OK
      description: Controller endpoint. Marks a customer as favorite or non favorite for the currently accessing user. The operation will be successful irrespective if the actual favorite status of the customer for the current user changes or not.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                isFavorite:
                  type: boolean
                  description: 'If true the customer is set as a favorite for the current user, if false the customer is removed from the user''s favorites.'
      tags:
        - CustomerSelection
  '/customers/{id}/mark-recently-used':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: ID of the customer
    post:
      summary: '/customers/{id}/mark-recently-used POST'
      operationId: customer-mark-recently-user#post
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      description: 'Controller endpoint. Marks a customer as recently used the currently accessing user. '
      tags:
        - CustomerSelection
  '/customers/{id}/reseller':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: ID of the customer
    get:
      summary: '/customers/{id}/reseller GET'
      tags:
        - Customers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customer-light'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '404':
          description: Not Found
      operationId: customer-reseller#get
      x-internal: false
      description: Gets the reseller of this customer.
  '/customers/{id}/reseller-path':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: ID of the customer
    get:
      summary: '/customers/{id}/reseller-path GET'
      tags:
        - Customers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/customer-light'
      operationId: customer-reseller-path-elements#get
      x-internal: false
      description: |-
        Gets all the customers on the reseller path from the root to this customer as sorted array (root to given customer id).
        Depth of customer relations is naturally limited, therefore this collection endpoint does not support pagination.
      parameters: []
  '/customers/{id}/reseller-relation':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: ID of the customer
    get:
      summary: '/customers/{id}/reseller-relation GET'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customerRelation'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      operationId: customer-reseller-relation#get
      x-internal: false
      description: Gets the reseller relation of this customer. I.e. the relation to its reseller.
      tags:
        - Customers
    post:
      summary: '/customers/{id}/reseller-relation POST'
      operationId: customers-reseller-relations#post
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customerRelation'
      description: Creates a reseller from this customer to a reseller (replacing the existing relation).
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customerRelation'
      tags:
        - Customers
  '/customers/{id}/role-assignments':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: ID of the customer
    get:
      summary: '/customers/{id}/role-assignments GET'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/customerRoleAssignment-customer'
                  totalPages:
                    $ref: '#/components/schemas/pagination-totalPages'
                  totalItems:
                    $ref: '#/components/schemas/pagination-totaItems'
                  pageSize:
                    $ref: '#/components/schemas/pagination-pageSize'
                  currentPage:
                    $ref: '#/components/schemas/pagination-currentPage'
                required:
                  - items
                  - totalPages
                  - totalItems
                  - pageSize
                  - currentPage
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      operationId: customer-role-assignments#get
      description: Gets roles-assignments of this customer. Role-assignments are ordered by the assignment date ascending (oldest first).
      parameters:
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/pageNumber'
        - schema:
            type: string
          in: query
          name: userId
          description: If given filters the list for roles assigned to that specific user
        - $ref: '#/components/parameters/onlyBestMatchingTranslation'
      x-internal: false
      tags:
        - Authorization
    post:
      summary: '/customers/{id}/role-assignments POST'
      operationId: customer-role-assignments#post
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customerRelation'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      description: Creates a new role-assignement for this customer.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customerRoleAssignment-customer'
      tags:
        - Authorization
  '/customers/{id}/role-inheritance':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: ID of the customer
    get:
      summary: '/customers/{id}/role-inheritance GET'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customer-role-inheritance'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      operationId: customer-role-inheritance#get
      description: Gets the role inheritance settings for this customer.
      x-internal: false
      tags:
        - Customers
    put:
      summary: '/customers/{id}/role-inheritance POST'
      operationId: customers-role-inheritance#put
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customer-role-inheritance'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      tags:
        - Customers
      description: Configures the role inheritance settings for a customer.
  '/customers/{id}/rooms':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: ID of the customer
    get:
      summary: '/customers/{id}/rooms GET'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/location-room'
                  totalPages:
                    $ref: '#/components/schemas/pagination-totalPages'
                  totalItems:
                    $ref: '#/components/schemas/pagination-totaItems'
                  pageSize:
                    $ref: '#/components/schemas/pagination-pageSize'
                  currentPage:
                    $ref: '#/components/schemas/pagination-currentPage'
                required:
                  - items
                  - totalPages
                  - totalItems
                  - pageSize
                  - currentPage
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      operationId: customer-room#get
      description: Get all the room locations of a customer. Collection is orderd by location name.
      parameters:
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/pageNumber'
        - schema:
            type: string
          in: query
          name: name
          description: Filters for rooms that contain the given value in their name
        - schema:
            type: string
          in: query
          name: code
          description: Filters for rooms that contain the given value in their code
      x-internal: false
      tags:
        - Locations
  '/customers/{id}/self-assignment-credentials':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: ID of the customer
    get:
      summary: '/customers/{id}/self-assignment-credentials GET'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/customerSelfAssignmentCredentials'
                  totalPages:
                    $ref: '#/components/schemas/pagination-totalPages'
                  totalItems:
                    $ref: '#/components/schemas/pagination-totaItems'
                  pageSize:
                    $ref: '#/components/schemas/pagination-pageSize'
                  currentPage:
                    $ref: '#/components/schemas/pagination-currentPage'
                required:
                  - items
                  - totalPages
                  - totalItems
                  - pageSize
                  - currentPage
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      operationId: self-assignment-credentials#get
      x-internal: false
      description: 'Gets a list of self-assignment credentials for the customer. List is ordered ascending by ValidTill date. '
      parameters:
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/pageNumber'
        - schema:
            type: string
            example: 'active,expired'
            pattern: '^(?:\s*([a-zA-Z0-9]+)\s*)(?:,\s*([a-zA-Z0-9]+)\s*)*$'
          in: query
          name: status
          description: 'Filters credentials by their status. Multiple status can be defined in a comma separated list. '
      tags:
        - CustomerSelfAssignment
  '/customers/{id}/self-assignment-credentials/latest':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: ID of the customer
    get:
      summary: '/customers/{id}/self-assignment-credentials/latest GET'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customerSelfAssignmentCredentials'
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customerSelfAssignmentCredentials'
        '400':
          description: Bad Request
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      operationId: self-assignment-credential-current#get
      x-internal: false
      description: 'Gets the self-assignment with the longest validity, if any.'
      tags:
        - CustomerSelfAssignment
  '/customers/{id}/status':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: ID of the customer
    get:
      summary: '/customers/{id}/status GET'
      tags:
        - Customers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
                enum:
                  - active
                  - inactive
                  - deleted
                example: inactive
      operationId: customer-status#get
      x-internal: false
      description: Gets the life-cycle status of the customer.
    put:
      summary: '/customers/{id}/status PUT'
      operationId: customer-status#put
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      description: Modifies the life-cycle status of the customer.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              enum:
                - active
                - inactive
                - deleted
      tags:
        - Customers
  '/customers/{id}/sub-customers':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: ID of the customer
    get:
      summary: '/customers/{id}/sub-customers GET'
      tags:
        - Customers
      operationId: customer-sub-customers#get
      x-internal: false
      description: Gets all the sub-customers of a customer (direct descendants in the reseller-relationship-tree). Collection is sorted by name1.
      parameters:
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/pageNumber'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/customer-light'
                  totalPages:
                    $ref: '#/components/schemas/pagination-totalPages'
                  totalItems:
                    $ref: '#/components/schemas/pagination-totaItems'
                  pageSize:
                    $ref: '#/components/schemas/pagination-pageSize'
                  currentPage:
                    $ref: '#/components/schemas/pagination-currentPage'
                required:
                  - items
                  - totalPages
                  - totalItems
                  - pageSize
                  - currentPage
  '/customers/{id}/subsidiaries':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: ID of the customer
    get:
      summary: '/customers/{id}/subsidiaries GET'
      tags:
        - Customers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/customer-light'
                  totalPages:
                    $ref: '#/components/schemas/pagination-totalPages'
                  totalItems:
                    $ref: '#/components/schemas/pagination-totaItems'
                  pageSize:
                    $ref: '#/components/schemas/pagination-pageSize'
                  currentPage:
                    $ref: '#/components/schemas/pagination-currentPage'
                required:
                  - items
                  - totalPages
                  - totalItems
                  - pageSize
                  - currentPage
      operationId: customer-subsidiaries#get
      x-internal: false
      description: Gets all the subsidiaries of a customer (direct descendants in the company-hierarchy-relationship-tree). Collection is sorted by name1.
      parameters:
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/pageNumber'
  '/customers/{id}/support-organization':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: ID of the customer
    get:
      summary: '/customers/{id}/support-organization GET'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/support-organization'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      operationId: customer-support-organization#get
      description: Gets details about the support organization for users when working in the context of this customer.
      parameters: []
      x-internal: false
      tags:
        - Customers
    put:
      summary: '/customers/{id}/support-organization PUT'
      operationId: customer-support-organization#put
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
      description: Defines the support organization responsible for this customer and all sub-customers (reseller relationship)
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/support-organization'
      tags:
        - Customers
    delete:
      summary: '/customers/{id}/support-organization DELETE'
      operationId: customer-support-organization#delete
      responses:
        '200':
          description: OK
      description: Removes the support-organization information from the customer.
      tags:
        - Customers
  '/customers/{id}/workforce':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: ID of  the user in the HsM system.
    get:
      summary: '/customers/{id}/workforce GET'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/user'
                  totalPages:
                    $ref: '#/components/schemas/pagination-totalPages'
                  totalItems:
                    $ref: '#/components/schemas/pagination-totaItems'
                  pageSize:
                    $ref: '#/components/schemas/pagination-pageSize'
                  currentPage:
                    $ref: '#/components/schemas/pagination-currentPage'
                required:
                  - items
                  - totalPages
                  - totalItems
                  - pageSize
                  - currentPage
          headers: {}
        '201':
          description: Created
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      operationId: customer-workforce#get
      description: Gets a list of users hat have some role assigned at this customer. The response will be sorted by user's lastname then first name.
      parameters:
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/pageNumber'
        - schema:
            type: string
          in: query
          name: name
          description: Filters for users whose first name or last name match the given string. The search uses "starts with"
        - schema:
            type: string
          in: query
          name: roles
          description: A comma separated list of roles. Only users who have at least one of these roles on this customer will be inclurde.
        - schema:
            type: boolean
            default: 'true'
          in: query
          name: includeInherited
          description: 'If set to false only users who have a directly assigned role on that customer will be returned, if true also users with inherited role assignments will be included in the result.'
      tags:
        - Authorization
  '/customers/{id}/workforce/{userId}/roles':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: ID of  the user in the HsM system.
      - schema:
          type: string
        name: userId
        in: path
        required: true
    get:
      summary: '/customers/{id}/workforce/{userId}/roles GET'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/effectiveCustomerRoleAssignment'
                  totalPages:
                    $ref: '#/components/schemas/pagination-totalPages'
                  totalItems:
                    $ref: '#/components/schemas/pagination-totaItems'
                  pageSize:
                    $ref: '#/components/schemas/pagination-pageSize'
                  currentPage:
                    $ref: '#/components/schemas/pagination-currentPage'
                required:
                  - items
                  - totalPages
                  - totalItems
                  - pageSize
                  - currentPage
          headers: {}
        '201':
          description: Created
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      operationId: customer-workforce-roles#get
      description: Gets a list of users hat have some role assigned at this customer. The response will be sorted by user's lastname then first name.
      parameters:
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/pageNumber'
        - $ref: '#/components/parameters/onlyBestMatchingTranslation'
      tags:
        - Authorization
  /effective-system-permissions:
    parameters: []
    get:
      summary: /effective-system-permissions GET
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    code:
                      type: string
                      description: Identifying code of the permission.
                  required:
                    - code
              examples: {}
      operationId: effective-system-permissions#get
      description: |-
        Gets the effectively granted system permissions of a user (the security principal) on the system (the securable). The response contains a representation of all system permissions the accessing user is effectively granted.

        As the number of system permissions is naturally limited this endpoint does not use pagination.
      parameters:
        - schema:
            type: integer
          in: query
          name: userId
          description: ID of the user for whom the effective permissions shall be returned. If not given will default to the accessing user.
      x-internal: false
      tags:
        - Authorization
  /buildings:
    parameters: []
    post:
      summary: ''
      operationId: buildings#post
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/location-building'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/location-building-area'
        description: ''
      description: Creates a new building
      tags:
        - Locations
  '/buildings/{id}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: ID of the building
    get:
      summary: '/buildings/{id} GET'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/location-building'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      operationId: building#get
      description: Gets a single building
      x-internal: false
      tags:
        - Locations
    put:
      summary: '/buildings/{id} POST'
      operationId: building#put
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      description: Updates a single building
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/location-building'
      tags:
        - Locations
    patch:
      summary: '/buildings/{id} PATCH'
      operationId: building#patch
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      description: Performs a partial update on a building.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/location-building.PATCH'
        description: ''
      tags:
        - Locations
    delete:
      summary: '/buildings/{id} DELETE'
      operationId: building#delete
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      description: Deletes the building.
      tags:
        - Locations
  /building-areas:
    parameters: []
    post:
      summary: /building-areas POST
      operationId: building-areas#post
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/location-building-area'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/location-building-area'
      description: Creates a new building area
      tags:
        - Locations
  '/buildings-areas/{id}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: ID of the building
    get:
      summary: '/buildings-areas/{id} GET'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/location-building-area'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      operationId: building-area#get
      description: Gets a single building
      x-internal: false
      tags:
        - Locations
    put:
      summary: '/buildings-areas/{id} PUT'
      operationId: building-area#put
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      description: Updates a single building area
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/location-building-area'
      tags:
        - Locations
    patch:
      summary: '/buildings-areas/{id} PATCH'
      operationId: building-area#patch
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      description: Performs a partial update on a building area resource.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/location-building-area.PATCH'
        description: ''
      tags:
        - Locations
    delete:
      summary: '/buildings-areas/{id} DELETE'
      operationId: building-area#delete
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      description: Deletes the building area.
      tags:
        - Locations
  /floors:
    parameters: []
    post:
      summary: /floors GET
      operationId: floors#post
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/location-floor'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/location-floor'
      description: Creates a new floor
      tags:
        - Locations
  '/floors/{id}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: ID of the floor
    get:
      summary: '/floors/{id} GET'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/location-floor'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      operationId: floor#get
      description: Gets a single floor
      x-internal: false
      tags:
        - Locations
    put:
      summary: '/floors/{id} PUT'
      operationId: floor#put
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      description: Updates a single floor
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/location-floor'
      tags:
        - Locations
    patch:
      summary: '/floors/{id} PATCH'
      operationId: floor#patch
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      description: Performs a partial update on a floor resoruce.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/location-floor.PATCH'
        description: ''
      tags:
        - Locations
    delete:
      summary: '/floors/{id} DELETE'
      operationId: floor#delete
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      tags:
        - Locations
      description: Deletes this floor.
  /floor-areas:
    parameters: []
    post:
      summary: /floor-areas GET
      operationId: floor-areas#post
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/location-floor-area'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/location-floor-area'
      description: Creates a new floor area
      tags:
        - Locations
  '/floor-areas/{id}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: ID of the floor area
    get:
      summary: '/floor-areas/{id} GET'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/location-floor-area'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Foundr
      operationId: floor-area#get
      description: Gets a single floor
      x-internal: false
      tags:
        - Locations
    put:
      summary: '/floor-areas/{id} PUT'
      operationId: floor-area#put
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      description: Updates a single floor area
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/location-floor-area'
      tags:
        - Locations
    patch:
      summary: '/floor-areas/{id} PATCH'
      operationId: floor-area#patch
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      description: Performs a partial update on a floor-area resource.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/location-floor-area.PATCH'
        description: ''
      tags:
        - Locations
    delete:
      summary: '/floor-areas/{id} DELETE'
      operationId: floor-area#delete
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      description: Deletes the floor area.
      tags:
        - Locations
  /hygiene-portal-applications:
    get:
      summary: /hygiene-portal-applications GET
      tags:
        - System
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  Name:
                    $ref: '#/components/schemas/phrase'
                  Url:
                    type: string
                    format: uri
                required:
                  - Name
                  - Url
      operationId: get-hygiene-portal-applications
      description: Gets a list of hygiene portal applications with their respective URLs.
      parameters:
        - $ref: '#/components/parameters/onlyBestMatchingTranslation'
  /instance-branding:
    get:
      summary: /instance-branding GET
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/branding'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      operationId: instance-branding#get
      description: Get the branding definition for the whole instance of HsM.
      tags:
        - System
    put:
      summary: /instance-branding PUT
      operationId: instance-branding#put
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/branding'
      description: Sets the branding for the whole instance
      tags:
        - System
    parameters: []
  '/locations/{id}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: ID of the location
    get:
      summary: '/locations/{id} GET'
      tags:
        - Locations
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/location'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      operationId: location#get
      description: 'Gets a single location. '
    patch:
      summary: '/locations/{id} PATCH'
      operationId: location#patch
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/location.PATCH'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      description: Performs a partial update on a location resource
      tags:
        - Locations
    delete:
      summary: '/locations/{id} DELETE'
      operationId: location#delete
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      description: Deletes the location
      tags:
        - Locations
  '/locations/{id}/sub-locations':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: ID of the location
    get:
      summary: '/locations/{id}/sub-locations GET'
      tags:
        - Locations
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/location'
                  totalPages:
                    $ref: '#/components/schemas/pagination-totalPages'
                  totalItems:
                    $ref: '#/components/schemas/pagination-totaItems'
                  pageSize:
                    $ref: '#/components/schemas/pagination-pageSize'
                  currentPage:
                    $ref: '#/components/schemas/pagination-currentPage'
                required:
                  - items
                  - totalPages
                  - totalItems
                  - pageSize
                  - currentPage
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      operationId: location-sublocations#get
      description: Returns all (direct) chrildren of this location.
      parameters:
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/pageNumber'
    post:
      summary: '/locations/{id}/sub-locations POST'
      operationId: location-sublocations#post
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/location'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      description: Creates a new sub-location of this location
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/location'
      tags:
        - Locations
  '/locations/{id}/path':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: ID of the location
    get:
      summary: '/locations/{id}/path GET'
      tags:
        - Locations
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/location'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      operationId: /location-path#get
      description: 'Returns all locations on the location-tree path to this location, including this location. The returned array is ordered by the tree-level of the locations i.e. the root locatio first.'
  /permissions:
    get:
      summary: /permissions GET
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  currentPage:
                    $ref: '#/components/schemas/pagination-currentPage'
                  totalPages:
                    $ref: '#/components/schemas/pagination-totalPages'
                  totalItems:
                    $ref: '#/components/schemas/pagination-totaItems'
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/permission'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      operationId: permissions#get
      description: Gets a list of permissions defined in the system.
      parameters:
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/pageNumber'
        - $ref: '#/components/parameters/onlyBestMatchingTranslation'
      x-internal: false
      tags:
        - System
    parameters: []
  /roles:
    get:
      summary: /roles GET
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  currentPage:
                    $ref: '#/components/schemas/pagination-currentPage'
                  totalPages:
                    $ref: '#/components/schemas/pagination-totalPages'
                  totalItems:
                    $ref: '#/components/schemas/pagination-totaItems'
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/role'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      operationId: roles#get
      description: Gets a list of roles defined in the system.
      parameters:
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/pageNumber'
        - $ref: '#/components/parameters/onlyBestMatchingTranslation'
      x-internal: false
      tags:
        - System
    parameters: []
  '/roles/{id}/associated-permissions':
    get:
      summary: '/roles/{id}/associated-permissions GET'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/permission'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      operationId: role-associated-permissions#get
      description: Get the list of permissions associated with the role.
      parameters:
        - $ref: '#/components/parameters/onlyBestMatchingTranslation'
      x-internal: false
      tags:
        - System
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        description: Id of the role.
        required: true
  /rooms:
    parameters: []
    post:
      summary: /rooms GET
      operationId: rooms#post
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/location-room'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/location-room'
      description: Creates a new room
      tags:
        - Locations
  '/rooms/{id}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: ID of the room
    get:
      summary: '/rooms/{id} GET'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/location-room'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      operationId: room#get
      description: Gets a single room
      x-internal: false
      tags:
        - Locations
    put:
      summary: '/rooms/{id} PUT'
      operationId: room#put
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      description: Updates a single room
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/location-room'
      tags:
        - Locations
    patch:
      summary: '/rooms/{id} PATCH'
      operationId: room#patch
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      description: Performs a partial update on a room resource.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/location-room.PATCH'
        description: ''
      tags:
        - Locations
    delete:
      summary: '/rooms/{id} DELETE'
      operationId: room#delete
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      tags:
        - Locations
      description: Deletes this room.
  /support-organization:
    get:
      summary: /support-organization GET
      tags:
        - Customers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/support-organization'
      operationId: support-organization#get
      parameters:
        - schema:
            type: string
            format: uuid
          in: query
          name: customerId
          description: The ID of the customer for which to get the suitable support information
      description: 'Gets all details about the organization that provides support for the end-user of the system. The support organization depends on the customer in context, or if no customer context is available will fall back to a default organization.'
    parameters: []
  /system-role-assignments:
    parameters: []
    get:
      summary: /system-role-assignments GET
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/customerRoleAssignment-customer'
                  totalPages:
                    $ref: '#/components/schemas/pagination-totalPages'
                  totalItems:
                    $ref: '#/components/schemas/pagination-totaItems'
                  pageSize:
                    $ref: '#/components/schemas/pagination-pageSize'
                  currentPage:
                    $ref: '#/components/schemas/pagination-currentPage'
                required:
                  - items
                  - totalPages
                  - totalItems
                  - pageSize
                  - currentPage
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      operationId: systemr-role-assignments#get
      description: Gets role-assignments for the system. Role-assignments are ordered by the assignment date ascending (oldest first).
      parameters:
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/pageNumber'
        - schema:
            type: string
          in: query
          name: userId
          description: If given filters the list for roles assigned to that specific user.
        - $ref: '#/components/parameters/onlyBestMatchingTranslation'
      x-internal: false
      tags:
        - Authorization
    post:
      summary: /system-role-assignments POST
      operationId: system-role-assignments#post
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      description: Creates a new role assignement for this customer.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customerRoleAssignment-user'
      tags:
        - Authorization
  '/system-role-assignments/{id}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: ID of the customer
    get:
      summary: '/system-role-assignments/{id} GET'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/systemRoleAssignment'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      operationId: system-role-assignment#get
      description: Gets a role assignement between users and the system.
      parameters:
        - schema:
            type: string
            format: uuid
          in: query
          name: Id
          description: ID of the role assignment
        - $ref: '#/components/parameters/onlyBestMatchingTranslation'
      x-internal: false
      tags:
        - Authorization
    delete:
      summary: '/system-role-assignments/{id} DELETE'
      operationId: system-role-assignment#delete
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      description: Deletes a system role assignment.
      parameters:
        - schema:
            type: string
            format: uuid
          in: query
          name: Id
          description: ID of the role assignment.
      tags:
        - Authorization
  /users:
    parameters: []
    get:
      summary: /users GET
      operationId: users#get
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/user'
                  totalPages:
                    $ref: '#/components/schemas/pagination-totalPages'
                  totalItems:
                    $ref: '#/components/schemas/pagination-totaItems'
                  pageSize:
                    $ref: '#/components/schemas/pagination-pageSize'
                  currentPage:
                    $ref: '#/components/schemas/pagination-currentPage'
                required:
                  - items
                  - totalPages
                  - totalItems
                  - pageSize
                  - currentPage
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      description: Gets registered users.
      parameters:
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/pageNumber'
        - schema:
            type: string
            example: 'deleted,masked'
            default: 'active, inactive'
          in: query
          name: status
          description: Filters users based on their status. Only users with a status that matches one of the given status will pass the filter.
      tags:
        - Users
    post:
      summary: /users POST
      operationId: users#post
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
      tags:
        - Users
      description: Creates a new user.
  '/users/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: '/users/{id} GET'
      operationId: user#get
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      description: Gets a specific user.
      tags:
        - Users
    put:
      summary: '/users/{id} PUT'
      operationId: user#put
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      description: Updates a specific user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
      tags:
        - Users
  '/users/{id}/status':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: '/users/{id}/status GET'
      operationId: user-status#get
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
                enum:
                  - active
                  - inactive
                  - deleted
                  - masked
              examples: {}
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      description: |-
        Gets a the status of a specific user.
        Active: The user can interact with the system.
        Inactive: The user can (temporarily) not interact with the system but can be reactivatd
        Deleted: The user was deleted and cannot be re-activated. The e-mail address of deleted users does not have to be unique within the system.
        Masked: The user was deleted and finally the data of the user was masked to support GPDR requirements. Masked users cannot be reactivated. All personal infomrmation is removed.
      tags:
        - Users
    put:
      summary: '/users/{id}/status PUT'
      operationId: user-status#put
      description: Updates a user's status
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userStatus'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              type: string
              enum:
                - active
                - inactive
                - deleted
                - masked
  '/users/{id}/customer-count':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: ID of  the user in the HsM system.
    get:
      summary: '/users/{id}/customer-count GET'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/customerRoleAssignment-user'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      operationId: user-customer-count#get
      description: Gets the number of customer this user has access to. Will only include active customers
      tags:
        - Authorization
  '/users/{id}/customer-roles':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: ID of  the user in the HsM system.
    get:
      summary: '/users/{id}/customer-roles GET'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/customerRoleAssignment-user'
                  totalPages:
                    $ref: '#/components/schemas/pagination-totalPages'
                  totalItems:
                    $ref: '#/components/schemas/pagination-totaItems'
                  pageSize:
                    $ref: '#/components/schemas/pagination-pageSize'
                  currentPage:
                    $ref: '#/components/schemas/pagination-currentPage'
                required:
                  - items
                  - totalPages
                  - totalItems
                  - pageSize
                  - currentPage
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      operationId: user-customerroles#get
      description: 'Gets a list of roles the user has on a customer, or on all customers. Result will be ordered by customerId then role code.'
      parameters:
        - schema:
            type: string
            format: uuid
          in: query
          name: customerId
          description: If given filters the results for a specific customer only.
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/pageNumber'
        - $ref: '#/components/parameters/onlyBestMatchingTranslation'
      tags:
        - Authorization
  '/users/{id}/favorite-customers':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: ID of  the user.
    get:
      summary: '/users/{id}/favorite-customers GET'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/customer-favorite'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      operationId: user-favorite-customers#get
      description: Gets the customer favorites of a user. Sorted by customer favorite sequence number and then by customer name1. As the total number of allowed customer favorites per user is limited by the backend therefore this collection endpoint has no pagination.
      tags:
        - CustomerSelection
  '/users/{id}/recently-used-customers':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: ID of  the user.
    get:
      summary: '/users/{id}/recently-used-customers GET'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/customer-recently-used'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      operationId: user-recently-used-customers#get
      description: 'Gets the recently used customers of a user. Sorted by the last access date descending. The total number of allowed recently used customers is limited per user by the backend, therefore this collection endpoint has no pagination.'
      tags:
        - CustomerSelection
  '/users/{id}/system-roles':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: ID of  the user in the HsM system.
    get:
      summary: '/users/{id}/system-roles GET'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/customerRoleAssignment-user'
                  totalPages:
                    $ref: '#/components/schemas/pagination-totalPages'
                  totalItems:
                    $ref: '#/components/schemas/pagination-totaItems'
                  pageSize:
                    $ref: '#/components/schemas/pagination-pageSize'
                  currentPage:
                    $ref: '#/components/schemas/pagination-currentPage'
                required:
                  - items
                  - totalPages
                  - totalItems
                  - pageSize
                  - currentPage
          headers: {}
        '201':
          description: Created
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      operationId: user-systemroles#get
      description: Gets a list of systemroles assigned to that user.
      parameters:
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/pageNumber'
        - $ref: '#/components/parameters/onlyBestMatchingTranslation'
      tags:
        - Authorization
components:
  schemas:
    branding:
      description: Describes the branding of the instance or the effective branding for a customer.
      type: object
      properties:
        productName:
          type: string
          minLength: 1
        displayModeDark:
          type: object
          properties:
            companyLogo:
              type: string
              minLength: 1
            navigationBarCompanyLogo:
              type: string
              minLength: 1
            mainColor300:
              type: object
              properties:
                hexCode:
                  type: string
                  minLength: 1
              required:
                - hexCode
            mainColor500:
              type: object
              properties:
                hexCode:
                  type: string
                  minLength: 1
              required:
                - hexCode
            mainColor700:
              type: object
              properties:
                hexCode:
                  type: string
                  minLength: 1
              required:
                - hexCode
            navigationBarColor:
              type: object
              properties:
                hexCode:
                  type: string
                  minLength: 1
              required:
                - hexCode
            navigationBarContrastColor:
              type: object
              properties:
                hexCode:
                  type: string
                  minLength: 1
              required:
                - hexCode
            selectionColor:
              type: object
              properties:
                hexCode:
                  type: string
                  minLength: 1
              required:
                - hexCode
          required:
            - companyLogo
            - navigationBarCompanyLogo
            - mainColor300
            - mainColor500
            - mainColor700
            - navigationBarColor
            - navigationBarContrastColor
            - selectionColor
        displayModeLight:
          type: object
          properties:
            companyLogo:
              type: string
              minLength: 1
            navigationBarCompanyLogo:
              type: string
              minLength: 1
            mainColor300:
              type: object
              properties:
                hexCode:
                  type: string
                  minLength: 1
              required:
                - hexCode
            mainColor500:
              type: object
              properties:
                hexCode:
                  type: string
                  minLength: 1
              required:
                - hexCode
            mainColor700:
              type: object
              properties:
                hexCode:
                  type: string
                  minLength: 1
              required:
                - hexCode
            navigationBarColor:
              type: object
              properties:
                hexCode:
                  type: string
                  minLength: 1
              required:
                - hexCode
            navigationBarContrastColor:
              type: object
              properties:
                hexCode:
                  type: string
                  minLength: 1
              required:
                - hexCode
            selectionColor:
              type: object
              properties:
                hexCode:
                  type: string
                  minLength: 1
              required:
                - hexCode
          required:
            - companyLogo
            - navigationBarCompanyLogo
            - mainColor300
            - mainColor500
            - mainColor700
            - navigationBarColor
            - navigationBarContrastColor
            - selectionColor
        instanceOperator:
          type: string
          minLength: 1
        clientSpecificOptions:
          type: object
          properties:
            webPortal:
              type: object
              properties:
                favIcon:
                  type: string
                  minLength: 1
              required:
                - favIcon
          required:
            - webPortal
      required:
        - productName
        - displayModeDark
        - displayModeLight
        - instanceOperator
        - clientSpecificOptions
      x-examples:
        example-1:
          productName: senseManagement
          displayModeDark:
            companyLogo: 'https://hagleitner.com/logos/hagleitnerLogo.dark.svg'
            navigationBarCompanyLogo: 'https://hagleitner.com/logos/hagleitnerLogo.dark.navigationbar.svg'
            mainColor300:
              hexCode: '#123456'
            mainColor500:
              hexCode: '#123456'
            mainColor700:
              hexCode: '#123456'
            navigationBarColor:
              hexCode: '#123456'
            navigationBarContrastColor:
              hexCode: '#123456'
            selectionColor:
              hexCode: '#123456'
          displayModeLight:
            companyLogo: 'https://hagleitner.com/logos/hagleitnerLogo.light.svg'
            navigationBarCompanyLogo: 'https://hagleitner.com/logos/hagleitnerLogo.light.navigationbar.svg'
            mainColor300:
              hexCode: '#123456'
            mainColor500:
              hexCode: '#123456'
            mainColor700:
              hexCode: '#123456'
            navigationBarColor:
              hexCode: '#123456'
            navigationBarContrastColor:
              hexCode: '#123456'
            selectionColor:
              hexCode: '#123456'
          instanceOperator: Hagleitner
          clientSpecificOptions:
            webPortal:
              favIcon: 'https://hagleitner.com/logos/hsm-favicon.svg'
      title: ''
    customer:
      type: object
      title: ''
      description: Describes a customer.
      examples:
        - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
          code: HHAT
          name1: HGM Facility care & management Ltd.
          name2: A FacilityWiz subsidiary
          name3: string
          name4: string
          address1: Huey Avenue 33b
          address2: The Holo Building
          city: London
          postalCode: W3BX
          countryCode: GB
          customerNumber: 21-0789-B
          emailAddress: office@hgmfacility.com
          phoneNumber: +44 256 51512
          vatIdentificationNumber: ATU12345667
          preferredCulture: en-GB
          status: active
          isReseller: true
          lastUpdatedAt: '2021-08-23T16:15:18.123+01:00'
          externallyManaged: true
          isFavorite: true
      properties:
        id:
          type: string
          format: uuid
          description: ID of the user within the HsM system
          readOnly: true
        code:
          type: string
          example: HHAT
          description: A code that - if given - uniquely identifies the customer within the whole system.
          maxLength: 20
        name1:
          type: string
          example: HGM Facility care & management Ltd.
          maxLength: 80
          description: The customer name
        name2:
          type: string
          example: A FacilityWiz subsidiary
          maxLength: 80
          description: Part of the customer name that is usually written on a second line in postal addresses.
        name3:
          type: string
          maxLength: 80
          description: Part of the customer name that is usually written on a third line in postal addresses.
        name4:
          type: string
          maxLength: 80
          description: Part of the customer name that is usually written on a forth line in postal addresses.
        address1:
          type: string
          example: Huey Avenue 33b
          maxLength: 80
          description: 'Street name, number, apartment/room etc. of the customer. Describing the geographic locatio nof the customer. Usage depends on country and area.'
        address2:
          type: string
          example: The Holo Building
          maxLength: 80
          description: 'Street name, number, apartment/room etc. of the customer. Describing the geographic locatio nof the customer. Usage depends on country and area.'
        city:
          type: string
          example: London
          maxLength: 80
          description: 'City, town village of the customer.'
        postalCode:
          type: string
          example: W3BX
          maxLength: 20
          description: 'Postal code of the city, town, village.'
        countryCode:
          type: string
          maxLength: 2
          example: GB
          description: ISO 3166-1 alpha-2 code of the customer's postal address.
        customerNumber:
          type: string
          maxLength: 20
          example: 21-0789-B
          description: The customer number used by the reseller to uniquely identify this customer.
        emailAddress:
          type: string
          description: The companies main e-mail address.
          format: email
          example: office@hgmfacility.com
          maxLength: 256
        phoneNumber:
          type: string
          description: The companies main phone number.
          example: +44 256 51512
          maxLength: 256
        vatIdentificationNumber:
          type: string
          description: The VAT identification number of the customer.
          example: ATU123456789
          maxLength: 15
        preferredCulture:
          type: string
          description: 'The culture this customer usually thinks in. Given as IETF BCP 47 language tag. '
          example: en-GB
          maxLength: 35
        status:
          enum:
            - active
            - inactive
            - deleted
          description: The status of the customer in HsM.
          default: active
          type: string
          readOnly: true
        isReseller:
          type: boolean
          description: Defines if a customer is a reseller. Customers marked as resellers can use HsM's reseller features.
        lastUpdatedAt:
          type: string
          description: Describes when the user was last modified within HsM.
          format: date-time
          example: '2021-08-23T16:15:18.123+01:00'
          readOnly: true
        resellerId:
          type: string
          format: uuid
          description: Specifies the reseller for this customer. In HsM every customer (except one root-customer) must have a reseller.
          writeOnly: true
        externallyManaged:
          type: boolean
          description: Defines if this is a externally managed customer. I.e. the customer details are managed by another system and synchronized to HsM and should therefore not be modified in HsM.
          readOnly: true
      required:
        - id
        - name1
        - status
        - isReseller
        - externallyManaged
    customer-light:
      type: object
      title: ''
      description: Describes a customer.
      examples: []
      properties:
        id:
          type: string
          format: uuid
          description: ID of the user within the HsM system
          readOnly: true
        code:
          type: string
          description: A unique code of the customer
        name1:
          type: string
          example: HGM Facility care & management Ltd.
          maxLength: 80
          description: The customer name
        name2:
          type: string
          example: A FacilityWiz subsidiary
          maxLength: 80
          description: Part of the customer name that is usually written on a second line in postal addresses.
        name3:
          type: string
          maxLength: 80
          description: Part of the customer name that is usually written on a third line in postal addresses.
        name4:
          type: string
          maxLength: 80
          description: Part of the customer name that is usually written on a forth line in postal addresses.
        address1:
          type: string
          example: Huey Avenue 33b
          maxLength: 80
          description: 'Street name, number, apartment/room etc. of the customer. Describing the geographic locatio nof the customer. Usage depends on country and area.'
        address2:
          type: string
          example: The Holo Building
          maxLength: 80
          description: 'Street name, number, apartment/room etc. of the customer. Describing the geographic locatio nof the customer. Usage depends on country and area.'
        city:
          type: string
          example: London
          maxLength: 80
          description: 'City, town village of the customer.'
        postalCode:
          type: string
          example: W3BX
          maxLength: 20
          description: 'Postal code of the city, town, village.'
        countryCode:
          type: string
          maxLength: 2
          example: GB
          description: ISO 3166-1 alpha-2 code of the customer's postal address.
        customerNumber:
          type: string
          description: 'The number that uniquely identifies the customer within all customer sof the same reseller. '
      required:
        - id
        - name1
    customer-favorite:
      type: object
      title: ''
      description: Describe a favorite customer of a user.
      examples:
        - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
          code: HHAT
          name1: HGM Facility care & management Ltd.
          name2: A FacilityWiz subsidiary
          name3: string
          name4: string
          address1: Huey Avenue 33b
          address2: The Holo Building
          city: London
          postalCode: W3BX
          countryCode: GB
          customerNumber: 21-0789-B
          emailAddress: office@hgmfacility.com
          phoneNumber: +44 256 51512
          vatIdentificationNumber: +44 256 51512
          preferredCulture: en-GB
          status: active
          isReseller: true
          lastUpdatedAt: '2021-08-23T16:15:18.123+01:00'
          externallyManaged: true
          isFavorite: true
      properties:
        id:
          type: string
          format: uuid
          description: ID of the user within the HsM system
          readOnly: true
        code:
          type: string
          example: HHAT
          description: A code that - if given - uniquely identifies the customer within the whole system.
          maxLength: 20
        name1:
          type: string
          example: HGM Facility care & management Ltd.
          maxLength: 80
          description: The customer name
        name2:
          type: string
          example: A FacilityWiz subsidiary
          maxLength: 80
          description: Part of the customer name that is usually written on a second line in postal addresses.
        name3:
          type: string
          maxLength: 80
          description: Part of the customer name that is usually written on a third line in postal addresses.
        name4:
          type: string
          maxLength: 80
          description: Part of the customer name that is usually written on a forth line in postal addresses.
        address1:
          type: string
          example: Huey Avenue 33b
          maxLength: 80
          description: 'Street name, number, apartment/room etc. of the customer. Describing the geographic locatio nof the customer. Usage depends on country and area.'
        address2:
          type: string
          example: The Holo Building
          maxLength: 80
          description: 'Street name, number, apartment/room etc. of the customer. Describing the geographic locatio nof the customer. Usage depends on country and area.'
        city:
          type: string
          example: London
          maxLength: 80
          description: 'City, town village of the customer.'
        postalCode:
          type: string
          example: W3BX
          maxLength: 20
          description: 'Postal code of the city, town, village.'
        countryCode:
          type: string
          maxLength: 2
          example: GB
          description: ISO 3166-1 alpha-2 code of the customer's postal address.
        sequenceNumber:
          type: integer
          description: Defines the order of the favorite within the user's favorite list.
          default: 0
      required:
        - id
        - name1
    customer-recently-used:
      type: object
      title: ''
      description: Describes a customer.
      examples:
        - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
          code: HHAT
          name1: HGM Facility care & management Ltd.
          name2: A FacilityWiz subsidiary
          name3: string
          name4: string
          address1: Huey Avenue 33b
          address2: The Holo Building
          city: London
          postalCode: W3BX
          countryCode: GB
          customerNumber: 21-0789-B
          emailAddress: office@hgmfacility.com
          phoneNumber: +44 256 51512
          vatIdentificationNumber: +44 256 51512
          preferredCulture: en-GB
          status: active
          isReseller: true
          lastUpdatedAt: '2021-08-23T16:15:18.123+01:00'
          externallyManaged: true
          isFavorite: true
      properties:
        id:
          type: string
          format: uuid
          description: ID of the user within the HsM system
          readOnly: true
        code:
          type: string
          example: HHAT
          description: A code that - if given - uniquely identifies the customer within the whole system.
          maxLength: 20
        name1:
          type: string
          example: HGM Facility care & management Ltd.
          maxLength: 80
          description: The customer name
        name2:
          type: string
          example: A FacilityWiz subsidiary
          maxLength: 80
          description: Part of the customer name that is usually written on a second line in postal addresses.
        name3:
          type: string
          maxLength: 80
          description: Part of the customer name that is usually written on a third line in postal addresses.
        name4:
          type: string
          maxLength: 80
          description: Part of the customer name that is usually written on a forth line in postal addresses.
        address1:
          type: string
          example: Huey Avenue 33b
          maxLength: 80
          description: 'Street name, number, apartment/room etc. of the customer. Describing the geographic locatio nof the customer. Usage depends on country and area.'
        address2:
          type: string
          example: The Holo Building
          maxLength: 80
          description: 'Street name, number, apartment/room etc. of the customer. Describing the geographic locatio nof the customer. Usage depends on country and area.'
        city:
          type: string
          example: London
          maxLength: 80
          description: 'City, town village of the customer.'
        postalCode:
          type: string
          example: W3BX
          maxLength: 20
          description: 'Postal code of the city, town, village.'
        countryCode:
          type: string
          maxLength: 2
          example: GB
          description: ISO 3166-1 alpha-2 code of the customer's postal address.
        latestUsedAt:
          type: string
          format: date-time
          description: Defines when the customer was last used by this user.
      required:
        - id
        - name1
        - latestUsedAt
    customer-role-inheritance:
      type: object
      title: ''
      description: Describes a customer.
      properties:
        AllowRoleInheritanceFromReseller:
          type: boolean
          description: Defines if roles applicable to the customer's reseller and marked for propagation down the reseller relation tree shall be actually inherited by this customer.
        AllowRoleInheritanceFromParentCustomer:
          type: boolean
          description: Defines if roles applicable to the customer's parent customer and marked for propagation down the customer hierarchy relation tree shall be actually inherited by this customer.
        AllowRoleInheritanceFromInvoiceRecipient:
          type: boolean
          description: Defines if roles applicable to the customer's invoice recipient and marked for propagation down the invoice relation tree shall be actually inherited by this customer.
        AllowRoleInheritanceFromConditionOwner:
          type: boolean
          description: Defines if roles applicable to the customer's condition owner and marked for propagation down the condition relation tree shall be actually inherited by this customer.
    customer.PATCH:
      type: object
      title: ''
      description: Used for partial updates to a customer.
      properties:
        code:
          type: string
          example: HHAT
          description: A code that -if given - uniquely identifies the customer within the whole system.
        name1:
          type: string
          example: HGM Facility care & management Ltd.
          maxLength: 80
          description: The customer name
        name2:
          type: string
          example: A FacilityWiz subsidiary
          maxLength: 80
          description: Part of the customer name that is usually written on a second line in postal addresses.
        name3:
          type: string
          example: HGM Facility care & management Ltd.
          maxLength: 80
          description: Part of the customer name that is usually written on a third line in postal addresses.
        name4:
          type: string
          example: HGM Facility care & management Ltd.
          maxLength: 80
          description: Part of the customer name that is usually written on a forth line in postal addresses.
        address1:
          type: string
          example: Huey Avenue 33b
          maxLength: 80
          description: 'Street name, number, apartment/room etc. of the customer. Describing the geographic locatio nof the customer. Usage depends on country and area.'
        address2:
          type: string
          example: The Holo Building
          maxLength: 80
          description: 'Street name, number, apartment/room etc. of the customer. Describing the geographic locatio nof the customer. Usage depends on country and area.'
        city:
          type: string
          example: London
          maxLength: 80
          description: 'City, town village of the customer.'
        postalCode:
          type: string
          example: W3BX
          maxLength: 20
          description: 'Postal code of the city, town, village.'
        countryCode:
          type: string
          maxLength: 2
          example: GB
          description: ISO 3166-1 alpha-2 code of the customer's postal address.
        customerNumber:
          type: string
          maxLength: 20
          example: 21-0789-B
          description: The customer number used by the reseller to uniquely identify this customer.
        emailAddress:
          type: string
          description: The companies main e-mail address.
          format: email
          example: office@hgmfacility.com
          maxLength: 256
        phoneNumber:
          type: string
          description: The companies main phone number.
          example: +44 256 51512
          maxLength: 256
        vatIdentificationNumber:
          type: string
          description: The VAT identification number of the customer.
          example: +44 256 51512
          maxLength: 256
        preferredCulture:
          type: string
          description: The culture this customer usually thinks in. Given as IETF BCP 47 language tag. If not given the system will use a default invariant culture.
          example: en-GB
          maxLength: 35
        isReseller:
          type: boolean
          description: Defines if a customer is a reseller. Customers marked as resellers can use HsM's reseller features.
        resellerId:
          type: string
          format: uuid
          description: Specifies the reseller for this customer. In HsM every customer (except one root-customer) must have a reseller.
          writeOnly: true
    customerBranding:
      description: Describes the branding options set for a customer
      type: object
      x-examples:
        example-1:
          productName: senseManagement
          displayModeDark:
            companyLogo: 'https://hagleitner.com/logos/hagleitnerLogo.dark.svg'
            navigationBarCompanyLogo: 'https://hagleitner.com/logos/hagleitnerLogo.dark.navigationbar.svg'
            mainColor300:
              hexCode: '#123456'
            mainColor500:
              hexCode: '#123456'
            mainColor700:
              hexCode: '#123456'
            navigationBarColor:
              hexCode: '#123456'
            navigationBarContrastColor:
              hexCode: '#123456'
            selectionColor:
              hexCode: '#123456'
          displayModeLight:
            companyLogo: 'https://hagleitner.com/logos/hagleitnerLogo.light.svg'
            navigationBarCompanyLogo: 'https://hagleitner.com/logos/hagleitnerLogo.light.navigationbar.svg'
            mainColor300:
              hexCode: '#123456'
            mainColor500:
              hexCode: '#123456'
            mainColor700:
              hexCode: '#123456'
            navigationBarColor:
              hexCode: '#123456'
            navigationBarContrastColor:
              hexCode: '#123456'
            selectionColor:
              hexCode: '#123456'
          instanceOperator: Hagleitner
          clientSpecificOptions:
            webPortal:
              favIcon: 'https://hagleitner.com/logos/hsm-favicon.svg'
      title: ''
      properties:
        displayModeDark:
          type: object
          required:
            - companyLogo
            - navigationBarCompanyLogo
            - mainColor300
            - mainColor500
            - mainColor700
            - navigationBarColor
            - navigationBarContrastColor
            - selectionColor
          properties:
            companyLogo:
              type: string
              minLength: 1
            navigationBarCompanyLogo:
              type: string
              minLength: 1
            mainColor300:
              type: object
              required:
                - hexCode
              properties:
                hexCode:
                  type: string
                  minLength: 1
            mainColor500:
              type: object
              required:
                - hexCode
              properties:
                hexCode:
                  type: string
                  minLength: 1
            mainColor700:
              type: object
              required:
                - hexCode
              properties:
                hexCode:
                  type: string
                  minLength: 1
            navigationBarColor:
              type: object
              required:
                - hexCode
              properties:
                hexCode:
                  type: string
                  minLength: 1
            navigationBarContrastColor:
              type: object
              required:
                - hexCode
              properties:
                hexCode:
                  type: string
                  minLength: 1
            selectionColor:
              type: object
              required:
                - hexCode
              properties:
                hexCode:
                  type: string
                  minLength: 1
        displayModeLight:
          type: object
          required:
            - companyLogo
            - navigationBarCompanyLogo
            - mainColor300
            - mainColor500
            - mainColor700
            - navigationBarColor
            - navigationBarContrastColor
            - selectionColor
          properties:
            companyLogo:
              type: string
              minLength: 1
            navigationBarCompanyLogo:
              type: string
              minLength: 1
            mainColor300:
              type: object
              required:
                - hexCode
              properties:
                hexCode:
                  type: string
                  minLength: 1
            mainColor500:
              type: object
              required:
                - hexCode
              properties:
                hexCode:
                  type: string
                  minLength: 1
            mainColor700:
              type: object
              required:
                - hexCode
              properties:
                hexCode:
                  type: string
                  minLength: 1
            navigationBarColor:
              type: object
              required:
                - hexCode
              properties:
                hexCode:
                  type: string
                  minLength: 1
            navigationBarContrastColor:
              type: object
              required:
                - hexCode
              properties:
                hexCode:
                  type: string
                  minLength: 1
            selectionColor:
              type: object
              required:
                - hexCode
              properties:
                hexCode:
                  type: string
                  minLength: 1
      required:
        - displayModeDark
        - displayModeLight
    customerRelation:
      type: object
      title: ''
      description: Represents a customer relation. The meaning of the customerId depends on the use case.
      properties:
        Id:
          type: string
          format: uuid
          readOnly: true
        customerId:
          type: string
          description: Represents the id of the customer this customer relates to.
        lastUpdatedAt:
          type: string
          readOnly: true
        externallyManaged:
          type: boolean
          description: ''
      required:
        - Id
        - customerId
    customerRoleAssignment-customer:
      title: ''
      type: object
      examples:
        - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
          userId: 2c4a230c-5085-4924-a3e1-25fb4fc5965b
          assignedAt: '2019-08-24T14:15:22Z'
          roleId: 7382d58e-652a-4905-b7c9-bcca1e0e5391
          userDisplayName: 'Doe, John'
          roleName: Customer Administrator
      description: Represents a customer role assignment from a customers perspective.
      properties:
        id:
          type: string
          description: ID of the role assignment
          format: uuid
          readOnly: true
        userId:
          type: string
          format: uuid
          description: ID of user who is assigned a role
        assignedAt:
          type: string
          description: Date when the role was assigned
          format: date-time
          readOnly: true
        roleId:
          type: string
          description: ID of the assigned role.
          format: uuid
        userDisplayName:
          type: string
          description: Display name of the user.
          readOnly: true
        roleName:
          $ref: '#/components/schemas/phrase'
        applicableToRelatedCustomersOnly:
          type: boolean
        externallyManaged:
          type: boolean
      required:
        - id
        - userId
        - assignedAt
        - roleId
        - userDisplayName
        - roleName
        - externallyManaged
    effectiveCustomerRoleAssignment:
      title: ''
      type: object
      examples:
        - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
          userId: 2c4a230c-5085-4924-a3e1-25fb4fc5965b
          assignedAt: '2019-08-24T14:15:22Z'
          roleId: 7382d58e-652a-4905-b7c9-bcca1e0e5391
          userDisplayName: 'Doe, John'
          roleName: Customer Administrator
      description: Represents a customer role assignment from a customers perspective.
      properties:
        id:
          type: string
          description: ID of the role assignment
          format: uuid
          readOnly: true
        assignedAt:
          type: string
          description: Date when the role was assigned
          format: date-time
          readOnly: true
        roleId:
          type: string
          description: ID of the assigned role.
          format: uuid
        roleName:
          $ref: '#/components/schemas/phrase'
        applicableToRelatedCustomersOnly:
          type: boolean
        externallyManaged:
          type: boolean
        sourceCustomerDisplayName:
          type: string
        sourceCustomerId:
          type: integer
      required:
        - id
        - assignedAt
        - roleId
        - roleName
        - applicableToRelatedCustomersOnly
        - externallyManaged
        - sourceCustomerDisplayName
        - sourceCustomerId
        - externallyManaged
    customerRoleAssignment-user:
      title: ''
      type: object
      examples:
        - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
          userId: 2c4a230c-5085-4924-a3e1-25fb4fc5965b
          assignedAt: '2019-08-24T14:15:22Z'
          roleId: 7382d58e-652a-4905-b7c9-bcca1e0e5391
          userDisplayName: 'Doe, John'
          roleName: Customer Administrator
      description: Represents a customer role assignment from a users perspective.
      properties:
        id:
          type: string
          description: ID of the role assignment
          format: uuid
          readOnly: true
        customerId:
          type: string
          format: uuid
          description: ID of user who is assigned a role
        assignedAt:
          type: string
          description: Date when the role was assigned
          format: date-time
          readOnly: true
        roleId:
          type: string
          description: ID of the assigned role.
          format: uuid
        customerDisplayName:
          type: string
          description: Display name of the user.
          readOnly: true
        roleName:
          $ref: '#/components/schemas/phrase'
        applicableToRelatedCustomersOnly:
          type: boolean
        externallyManaged:
          type: boolean
      required:
        - id
        - customerId
        - assignedAt
        - roleId
        - customerDisplayName
        - roleName
    customerSelfAssignmentCredentials:
      title: ''
      type: object
      properties:
        Id:
          type: string
          format: uuid
          description: ID of this self-assignment credential
          readOnly: true
        customerNumber:
          type: string
          description: Customer number of this credential
          readOnly: true
        pin:
          type: string
          description: PIN of this credential
          minLength: 9
          maxLength: 9
          readOnly: true
        validTill:
          type: string
          description: Date until this credential is valid.
          format: date-time
          readOnly: true
        shareUri:
          type: string
          format: uri
          description: A URI that can be used to assign oneself to the customer.
        createdAt:
          type: string
          format: date-time
          description: Date when the credentials were created.
      required:
        - Id
        - customerNumber
        - pin
        - validTill
        - shareUri
        - createdAt
    location:
      title: ''
      type: object
      description: 'Represents a location (building, building-area, floor, floor-area, room). '
      examples:
        - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
          type: floor
          name: Floor 013
          description: The administration floor
          parentLocationId: 7c3a5b0e-d172-4ccd-83a4-1483006217d2
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        type:
          type: string
          enum:
            - building
            - buildingArea
            - floor
            - floorArea
            - room
          readOnly: true
        code:
          type: string
          maxLength: 20
          description: A code uniquely identifying the location within a customer.
        name:
          type: string
          maxLength: 30
          minLength: 1
        description:
          type: string
        parentLocationId:
          type: string
          format: uuid
        sequenceNumber:
          type: integer
          default: 0
      required:
        - id
        - type
        - name
        - parentLocationId
        - sequenceNumber
    location.PATCH:
      title: ''
      type: object
      description: 'Represents a location (building, building-area, floor, floor-area, room). '
      examples:
        - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
          type: floor
          name: Floor 013
          description: The administration floor
          parentLocationId: 7c3a5b0e-d172-4ccd-83a4-1483006217d2
      properties:
        code:
          type: string
          maxLength: 20
          description: A code uniquely identifying the location within a customer.
        name:
          type: string
          maxLength: 30
          minLength: 1
        description:
          type: string
        parentLocationId:
          type: string
          format: uuid
        sequenceNumber:
          type: integer
          default: 0
    location-room:
      title: ''
      type: object
      description: 'Represents a location (building, building-area, floor, floor-area, room). '
      examples:
        - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
          type: floor
          name: Floor 013
          description: The administration floor
          parentLocationId: 7c3a5b0e-d172-4ccd-83a4-1483006217d2
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        code:
          type: string
          maxLength: 20
          description: A code uniquely identifying the location within a customer.
        name:
          type: string
          maxLength: 30
          minLength: 1
        description:
          type: string
        parentLocationId:
          type: string
          format: uuid
        sequenceNumber:
          type: integer
          default: 0
      required:
        - id
        - name
        - parentLocationId
        - sequenceNumber
    location-room.PATCH:
      title: ''
      type: object
      description: 'Represents a location (building, building-area, floor, floor-area, room). '
      examples:
        - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
          type: floor
          name: Floor 013
          description: The administration floor
          parentLocationId: 7c3a5b0e-d172-4ccd-83a4-1483006217d2
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        code:
          type: string
          maxLength: 20
          description: A code uniquely identifying the location within a customer.
        name:
          type: string
          maxLength: 30
          minLength: 1
        description:
          type: string
        parentLocationId:
          type: string
          format: uuid
        sequenceNumber:
          type: integer
          default: 0
    location-building:
      title: ''
      type: object
      description: A model for a building location.
      examples:
        - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
          type: floor
          name: Floor 013
          description: The administration floor
          parentLocationId: 7c3a5b0e-d172-4ccd-83a4-1483006217d2
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        code:
          type: string
          maxLength: 20
          description: A code uniquely identifying the location within a customer.
        name:
          type: string
          maxLength: 30
          minLength: 1
        description:
          type: string
        sequenceNumber:
          type: integer
          default: 0
        customerId:
          type: string
          format: uuid
          description: The customer the building belongs to.
          readOnly: true
      required:
        - id
        - name
        - sequenceNumber
        - customerId
    location-building.PATCH:
      title: ''
      type: object
      description: A model used to patch building locations.
      examples:
        - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
          type: floor
          name: Floor 013
          description: The administration floor
          parentLocationId: 7c3a5b0e-d172-4ccd-83a4-1483006217d2
      properties:
        code:
          type: string
          maxLength: 20
          description: A code uniquely identifying the location within a customer.
        name:
          type: string
          maxLength: 30
          minLength: 1
        description:
          type: string
        sequenceNumber:
          type: integer
          default: 0
    location-building-area:
      title: ''
      type: object
      description: A model for a building area location.
      examples:
        - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
          type: floor
          name: Floor 013
          description: The administration floor
          parentLocationId: 7c3a5b0e-d172-4ccd-83a4-1483006217d2
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        code:
          type: string
          maxLength: 20
          description: A code uniquely identifying the location within a customer.
        name:
          type: string
          maxLength: 30
          minLength: 1
        description:
          type: string
        parentLocationId:
          type: string
          format: uuid
        sequenceNumber:
          type:
            - string
            - integer
          default: 0
      required:
        - id
        - name
        - parentLocationId
        - sequenceNumber
    location-building-area.PATCH:
      title: ''
      type: object
      description: A model used to patch building area locations.
      examples:
        - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
          type: floor
          name: Floor 013
          description: The administration floor
          parentLocationId: 7c3a5b0e-d172-4ccd-83a4-1483006217d2
      properties:
        code:
          type: string
          maxLength: 20
          description: A code uniquely identifying the location within a customer.
        name:
          type: string
          maxLength: 30
          minLength: 1
        description:
          type: string
        parentLocationId:
          type: string
          format: uuid
        sequenceNumber:
          type:
            - string
            - integer
          default: 0
    location-floor:
      title: ''
      type: object
      description: A model for a floor location.
      examples:
        - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
          type: floor
          name: Floor 013
          description: The administration floor
          parentLocationId: 7c3a5b0e-d172-4ccd-83a4-1483006217d2
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        code:
          type: string
          maxLength: 20
          description: A code uniquely identifying the location within a customer.
        name:
          type: string
          maxLength: 30
          minLength: 1
        description:
          type: string
        parentLocationId:
          type: string
          format: uuid
        sequenceNumber:
          type:
            - string
            - integer
          default: 0
      required:
        - id
        - name
        - parentLocationId
        - sequenceNumber
    location-floor.PATCH:
      title: ''
      type: object
      description: A model used to patch floor locations.
      examples:
        - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
          type: floor
          name: Floor 013
          description: The administration floor
          parentLocationId: 7c3a5b0e-d172-4ccd-83a4-1483006217d2
      properties:
        code:
          type: string
          maxLength: 20
          description: A code uniquely identifying the location within a customer.
        name:
          type: string
          maxLength: 30
          minLength: 1
        description:
          type: string
        parentLocationId:
          type: string
          format: uuid
        sequenceNumber:
          type:
            - string
            - integer
          default: 0
    location-floor-area:
      title: ''
      type: object
      description: A model for a floor area location.
      examples:
        - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
          type: floor
          name: Floor 013
          description: The administration floor
          parentLocationId: 7c3a5b0e-d172-4ccd-83a4-1483006217d2
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        code:
          type: string
          maxLength: 20
          description: A code uniquely identifying the location within a customer.
        name:
          type: string
          maxLength: 30
          minLength: 1
        description:
          type: string
        parentLocationId:
          type: string
          format: uuid
        sequenceNumber:
          type:
            - string
            - integer
          default: 0
      required:
        - id
        - name
        - parentLocationId
        - sequenceNumber
    location-floor-area.PATCH:
      title: ''
      type: object
      description: A model used to patch floor area locations.
      examples:
        - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
          type: floor
          name: Floor 013
          description: The administration floor
          parentLocationId: 7c3a5b0e-d172-4ccd-83a4-1483006217d2
      properties:
        code:
          type: string
          maxLength: 20
          description: A code uniquely identifying the location within a customer.
        name:
          type: string
          maxLength: 30
          minLength: 1
        description:
          type: string
        parentLocationId:
          type: string
          format: uuid
        sequenceNumber:
          type:
            - string
            - integer
          default: 0
    location-tree:
      title: ''
      type: array
      description: 'Represents a location (building, building-area, floor, floor-area, room). '
      examples:
        - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
          type: floor
          name: Floor 013
          description: The administration floor
          parentLocationId: 7c3a5b0e-d172-4ccd-83a4-1483006217d2
      items:
        $ref: '#/components/schemas/location-tree-element'
    location-tree-element:
      title: ''
      type: object
      description: 'Represents a location (building, building-area, floor, floor-area, room). '
      examples:
        - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
          type: floor
          name: Floor 013
          description: The administration floor
          parentLocationId: 7c3a5b0e-d172-4ccd-83a4-1483006217d2
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        type:
          type: string
          enum:
            - building
            - buildingArea
            - floor
            - floorArea
            - room
          readOnly: true
        name:
          type: string
          maxLength: 30
          minLength: 1
        description:
          type: string
        sequenceNumber:
          type:
            - string
            - integer
          default: 0
        children:
          type: array
          items:
            $ref: '#/components/schemas/location-tree-element'
      required:
        - id
        - type
        - name
        - sequenceNumber
    response-400-badRequest:
      description: ''
      type: object
      x-examples:
        example-1:
          error:
            code: InvalidEmail
            message: The provided e-mail address is syntactically not valid.
            displayMessage: Die angegebene E-Mail Addresse ist ungültig
            target: EMail
            innerError:
              code: EmailTestFailed
              innerError:
                code: NoSuchAccount
            details:
              - code: NoAtSign
                message: There is no @ sign in the email
              - code: EmailAddressContainsInvalidCharacters
                message: 'Email addresses can only contain [a-zA-Z]'
      properties:
        error:
          type: object
          required:
            - code
            - message
          properties:
            code:
              type: string
              minLength: 1
            message:
              type: string
              minLength: 1
            displayMessage:
              type: string
              minLength: 1
            target:
              type: string
              minLength: 1
            innerError:
              type: object
              required:
                - code
              properties:
                code:
                  type: string
                  minLength: 1
                innerError:
                  type: object
                  required:
                    - code
                  properties:
                    code:
                      type: string
                      minLength: 1
            details:
              type: array
              uniqueItems: true
              minItems: 1
              items:
                type: object
                properties:
                  code:
                    type: string
                    minLength: 1
                  message:
                    type: string
                    minLength: 1
                required:
                  - code
                  - message
      required:
        - error
    response-401-unauthorized:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
            message:
              type: string
            correlationId:
              type: string
            missingPermissions:
              type: array
              items:
                type: string
            details:
              type: array
              items:
                type: object
                properties:
                  code:
                    type: string
                  message:
                    type: string
                required:
                  - code
                  - message
          required:
            - code
            - message
    response-403-forbidden:
      type: object
      title: ''
    pagination-totalPages:
      type: integer
      title: pagination-totalPages
      description: Total number of pages available.
      minimum: 0
    pagination-totaItems:
      type: integer
      title: pagination-totalPages
      description: Total number of items available.
      minimum: 0
    pagination-currentPage:
      type: integer
      title: pagination-totalPages
      description: Current page included in this result.
      minimum: 0
    pagination-pageSize:
      type: integer
      title: pagination-totalPages
      description: Page size that was used to generate the result set.
      minimum: 0
    permission:
      title: permission
      type: object
      description: ''
      properties:
        id:
          type: integer
          format: int32
        code:
          type: string
          description: Unique alphanumeric identifier of the permission.
        name:
          $ref: '#/components/schemas/phrase'
        permissionType:
          type: string
          enum:
            - system
            - customer
          description: The type of permission.
      required:
        - id
        - code
        - name
        - permissionType
    phrase:
      title: phrase
      type: array
      description: Represents a group of words in multiple translations.
      items:
        type: object
        properties:
          LanguageTag:
            type: string
            description: The RFC 5646/BCP 47 based tag identifying the translation language.
            minLength: 2
            maxLength: 35
          Translation:
            type: string
            description: The actual translation
        required:
          - LanguageTag
          - Translation
    role:
      title: role
      type: object
      properties:
        id:
          type: integer
          description: Id of the role.
          format: int32
        name:
          $ref: '#/components/schemas/phrase'
      required:
        - id
        - name
      examples:
        - id: 0
          name:
            - LanguageTag: string
              Translation: string
    support-organization:
      title: support-organization
      type: object
      properties:
        name:
          type: string
          description: Name of the support organization
          maxLength: 80
        emailAddress:
          type: string
          description: Email address of the support organization
          format: email
        phoneNumber:
          type: string
          description: |
            Phone number of the support organization
          maxLength: 30
        businessHours:
          type: string
          description: Business hours of the support organization
        postalAddress:
          type: string
          description: The postal address of the support organization
      required:
        - name
    systemRoleAssignment:
      title: ''
      type: object
      examples:
        - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
          userId: 2c4a230c-5085-4924-a3e1-25fb4fc5965b
          assignedAt: '2019-08-24T14:15:22Z'
          roleId: 7382d58e-652a-4905-b7c9-bcca1e0e5391
          userDisplayName: 'Doe, John'
          roleName: Customer Administrator
      description: Represents a role assignment from a users perspective.
      properties:
        id:
          type: string
          description: ID of the role assignment
          format: uuid
          readOnly: true
        assignedAt:
          type: string
          description: Date when the role was assigned
          format: date-time
          readOnly: true
        roleId:
          type: string
          description: ID of the assigned role.
          format: uuid
        roleName:
          $ref: '#/components/schemas/phrase'
        userId:
          type: string
          format: uuid
        userDisplayName:
          type: string
          readOnly: true
      required:
        - id
        - assignedAt
        - roleId
        - roleName
        - userId
        - userDisplayName
    user:
      type: object
      title: user
      description: |-
        Represents a user of the HsM system. Users in HsM will be linked to Azure B2C accounts by the unique e-mail address once a user first accesses HsM via B2C authentication.

        * No gender information is stored with users - this is intentional
        * `givenName` and `surname` are used as in official ID documents.
        * `displayName` is a rendering of the user name in a single string.
      properties:
        id:
          type: string
          format: uuid
          description: ID of the user within the HsM system.
          readOnly: true
        givenName:
          type: string
          example: John
          maxLength: 50
          description: Given name of the user
        surname:
          type: string
          example: Doe
          maxLength: 50
          description: Sure name of the user.
        displayName:
          type: string
          description: A presentation of the user's full name that is used for sorting.
        emailAddress:
          type: string
          description: The users e-mail address. This address must be unique within all non deleted users in the HsM system.
          format: email
          example: john@doe.com
          maxLength: 256
        preferredCulture:
          type: string
          description: |-
            The culture the user wants to use in interaction with the system. Given as IETF BCP 47 language tag. If not given the system will use a default invariatn culture. 

            This cutlure is a default for this user, client systems might however choose to use another culture for interaction with the HsM system.
          example: de-AT
          maxLength: 35
        mobilePhoneNumber:
          type: string
          description: 'Mobile phone number. This number will be used when the system wants to interact with that user via SMS, mobile phone numbers are not exposed to other users.'
          example: +43 664 9161413
        lastUpdatedAt:
          type: string
          description: 'Describes when the user was last modified within HsM. '
          format: date-time
          example: '2021-08-23T16:15:18.123+01:00'
          readOnly: true
        status:
          type: string
          enum:
            - active
            - inactive
            - deleted
            - masked
          example: inactive
          readOnly: true
        externallyManaged:
          type: boolean
      required:
        - id
        - surname
        - displayName
        - emailAddress
        - lastUpdatedAt
        - status
    userStatus:
      type: string
      title: ''
      enum:
        - active
        - inactive
        - deleted
        - masked
      description: The status of a user within HsM.
      default: active
  parameters:
    pageSize:
      name: pageSize
      in: query
      schema:
        type: integer
        format: int32
        example: 100
        default: 100
        minimum: 1
      description: 'Pagination, maximum number of elements in a page.'
    pageNumber:
      name: pageNumber
      in: query
      schema:
        type: integer
        format: int32
        minimum: 1
        example: 200
      description: 'Pagination, 1-based number of the page to return.'
    Accept-Language:
      name: Accept-Language
      in: header
      required: false
      schema:
        type: string
      description: 'The "Accept-Language" header field can be used by user agents to indicate the set of natural languages that are preferred in the response. '
    onlyBestMatchingTranslation:
      name: onlyBestMatchingTranslation
      in: query
      required: false
      schema:
        type: boolean
      description: 'If set, phrases returned by the operation will only include the best matching translation according to the provided Accept-Language header.'
  responses: {}
