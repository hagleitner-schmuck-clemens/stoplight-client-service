openapi: 3.1.0
info:
  title: Standard API
  version: '1.0'
  summary: A generic API to the HsM system.
  description: A generic API to the HsM system.
  contact:
    name: 'Daniel Egger, Clemens Schmuck'
servers:
  - url: 'http://localhost:3000'
paths:
  '/customers/{customerId}/device-filters/':
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    description: Glbally unique Id of the device filter.
                  name:
                    type: string
                    description: Name of the device filter in the requested language/culture.
                  description:
                    type: string
                    description: Description of the device filter in the requested language/culture.
                  storage-scope:
                    type: string
                    enum:
                      - global
                      - organization
                      - customer
                    description: Scope in which the device filter is actually stored.
                  visibility-constraint:
                    type: string
                    enum:
                      - peronal
                      - public
                    description: 'Visibility '
                required:
                  - id
              examples:
                example-1:
                  value: {}
      operationId: get-customer-devicefilters
      description: Gets all device filters available in the scope of the customer.
      parameters:
        - schema:
            type: boolean
            default: 'true'
          in: query
          name: filter-inherited
        - schema:
            type: number
          in: query
        - schema:
            type: string
          in: query
          name: limit
        - schema:
            type: string
          in: query
        - schema:
            type: string
          in: query
    parameters:
      - schema:
          type: string
        name: customerId
        in: path
        required: true
  '/devices/{device-id}/data-link-expectation':
    parameters:
      - schema:
          type: string
        name: device-id
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses: {}
      operationId: get-devices-device-id-data-link-expectation
      description: Gets the data link expectation set for this device.
      requestBody:
        content:
          application/json:
            schema:
              type:
                - object
                - string
              enum:
                - online
                - soft-offline
                - hard-offline
    put:
      summary: ''
      operationId: put-devices-device-id-data-link-expectation
      responses:
        '200':
          description: OK
      description: Sets the data link expectation for a device.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              enum:
                - online
                - soft-offline
                - hard-offline
              description: The expectation to set.
  '/devices/{device-id}/device-connections':
    parameters:
      - schema:
          type: string
        name: device-id
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  '':
                    type: string
      operationId: get-devices-device-id-device-connections
      description: If device is a stationary gateway gets connected BLE devices. If device is a BLE-networked device gets connections to stationary gateways.
      parameters:
        - schema:
            type: boolean
            default: 'true'
          in: query
          name: includeHistorical
          description: If set to true historical data will be included in the response.
components:
  schemas:
    phrase:
      title: phrase
      type: array
      items:
        type: object
        properties:
          culture:
            type: string
          translation:
            type: string
